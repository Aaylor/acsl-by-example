(* ---------------------------------------------------------- *)
(* --- Global Definitions (continued #3)                  --- *)
(* ---------------------------------------------------------- *)
theory Axiomatic3
  
use import bool.Bool
use import int.Int
use import int.ComputerDivision
use import real.RealInfix
use import Qed.Qed
use import int.Abs as IAbs
use import map.Map
use import Memory.Memory
use import Compound.Compound
use import Axiomatic2.Axiomatic2

predicate p_PartialSum (mint_0 : map addr int) (mint_1 : map addr int)
    (a : addr) (n : int) (b : addr) =
    forall i : int. (i < n) -> (0 <= i) ->
    (mint_0[(shift_sint32 b i)] = ((l_Accumulate_2_ mint_1 a (1 + i))))

lemma Q_PartialSum_Next:
  forall a b : addr.
  forall mint_0 mint_1 : map addr int.
  forall n : int.
  (0 < n) -> ((p_PartialSum mint_0 mint_1 a n b)) ->
    (mint_0[(shift_sint32 b n)]
       = (mint_1[(shift_sint32 a n)] + mint_0[(shift_sint32 b (n - 1))])) ->
    ((p_PartialSum mint_0 mint_1 a (1 + n) b))

end

