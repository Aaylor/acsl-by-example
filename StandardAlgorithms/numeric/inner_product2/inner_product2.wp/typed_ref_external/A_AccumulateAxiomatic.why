(* ---------------------------------------------------------- *)
(* --- Axiomatic 'AccumulateAxiomatic'                    --- *)
(* ---------------------------------------------------------- *)
theory A_AccumulateAxiomatic
  
use import bool.Bool
use import int.Int
use import int.ComputerDivision
use import real.RealInfix
use import Qed.Qed
use import int.Abs as IAbs
use import map.Map
use import Memory.Memory

function l_Accumulate_1_ (map addr int) addr int int : int

use import Cint.Cint
use import Axiomatic1.Axiomatic1

axiom Q_AccumulateRead:
  forall a : addr.
  forall mint_0 mint_1 : map addr int.
  forall init_0 n : int.
  ((is_sint32 init_0)) -> ((p_EqualRanges_2_ mint_0 mint_1 a n)) ->
    (((l_Accumulate_1_ mint_0 a n init_0))
       = ((l_Accumulate_1_ mint_1 a n init_0)))

use import Compound.Compound

axiom Q_AccumulateNext:
  forall a : addr.
  forall mint_0 : map addr int.
  forall init_0 n : int.
  (0 <= n) -> ((is_sint32 init_0)) ->
    (((l_Accumulate_1_ mint_0 a (1 + n) init_0))
       = (mint_0[(shift_sint32 a n)] + ((l_Accumulate_1_ mint_0 a n init_0))))

axiom Q_AccumulateEmpty:
  forall a : addr.
  forall mint_0 : map addr int.
  forall init_0 n : int.
  (n <= 0) -> ((is_sint32 init_0)) ->
    (init_0 = ((l_Accumulate_1_ mint_0 a n init_0)))

end

