(* ---------------------------------------------------------- *)
(* --- Global Definitions                                 --- *)
(* ---------------------------------------------------------- *)
theory Axiomatic
  
use import bool.Bool
use import int.Int
use import int.ComputerDivision
use import real.RealInfix
use import Qed.Qed
use import int.Abs as IAbs
use import map.Map
use import Memory.Memory
use import Compound.Compound

function l_Capacity (mint_0 : map addr int) (s : addr) : int =
    mint_0[(shiftfield_F1_Stack_capacity s)]

function l_Size (mint_0 : map addr int) (s : addr) : int =
    mint_0[(shiftfield_F1_Stack_size s)]

predicate p_Full (mint_0 : map addr int) (s : addr) =
    ((l_Capacity mint_0 s)) = ((l_Size mint_0 s))

predicate p_Empty (mint_0 : map addr int) (s : addr) =
    0 = ((l_Size mint_0 s))

function l_Top (mptr_0 : map addr addr) (mint_0 : map addr int)
    (s : addr) : int =
    mint_0[(shift_sint32 mptr_0[(shiftfield_F1_Stack_obj s)]
             (mint_0[(shiftfield_F1_Stack_size s)] - 1))]

function l_Storage (mptr_0 : map addr addr) (s : addr) : addr =
    mptr_0[(shiftfield_F1_Stack_obj s)]

predicate p_Valid (malloc_0 : map int int) (mptr_0 : map addr addr)
    (mint_0 : map addr int) (s : addr) =
    let x = (l_Capacity mint_0 s) in let x_1 = (l_Size mint_0 s) in
    let a = (shift_sint32 ((l_Storage mptr_0 s)) 0) in (0 < x) /\
    (0 <= x_1) /\ (x_1 <= x) /\ ((valid_rw malloc_0 s 3)) /\
    ((valid_rw malloc_0 a x)) /\ ((separated s 3 a x))

predicate p_Unchanged_1_ (mint_0 : map addr int) (mint_1 : map addr int)
    (a : addr) (first_0 : int) (last_0 : int) =
    forall i : int. let a_1 = (shift_sint32 a i) in (i < last_0) ->
    (first_0 <= i) -> (mint_0[a_1] = mint_1[a_1])

predicate p_Unchanged_2_ (mint_0 : map addr int) (mint_1 : map addr int)
    (a : addr) (n : int) = (p_Unchanged_1_ mint_0 mint_1 a 0 n)

predicate p_EqualRanges (mint_0 : map addr int) (mint_1 : map addr int)
    (a : addr) (n : int) (b : addr) =
    forall i : int. (i < n) -> (0 <= i) ->
    (mint_0[(shift_sint32 b i)] = mint_1[(shift_sint32 a i)])

predicate p_Equal (mptr_0 : map addr addr) (mint_0 : map addr int)
    (mptr_1 : map addr addr) (mint_1 : map addr int) (s : addr) (t : addr) =
    let x = (l_Size mint_1 s) in (x = ((l_Size mint_0 t))) /\
    ((p_EqualRanges mint_0 mint_1 ((l_Storage mptr_1 s)) x
       ((l_Storage mptr_0 t))))

use import Cint.Cint

axiom Q_TL_Top:
  forall s : addr.
  forall mptr_0 : map addr addr.
  forall mint_0 : map addr int
  [(l_Top mptr_0 mint_0 s)].
  (is_sint32 ((l_Top mptr_0 mint_0 s)))

axiom Q_TL_Capacity:
  forall s : addr.
  forall mint_0 : map addr int
  [(l_Capacity mint_0 s)].
  (is_uint32 ((l_Capacity mint_0 s)))

lemma Q_UnchangedStep:
  forall a : addr.
  forall mint_0 mint_1 : map addr int.
  forall n : int.
  let a_1 = (shift_sint32 a n) in (0 <= n) -> (mint_0[a_1] = mint_1[a_1]) ->
    ((p_Unchanged_2_ mint_0 mint_1 a n)) ->
    ((p_Unchanged_2_ mint_0 mint_1 a (1 + n)))

lemma Q_UnchangedSection:
  forall a : addr.
  forall mint_0 mint_1 : map addr int.
  forall m n : int.
  (0 <= m) -> (m <= n) -> ((p_Unchanged_2_ mint_0 mint_1 a n)) ->
    ((p_Unchanged_2_ mint_0 mint_1 a m))

lemma Q_StackEqualTransitive:
  forall s t u : addr.
  forall mptr_0 mptr_1 mptr_2 : map addr addr.
  forall mint_0 mint_1 mint_2 : map addr int.
  ((p_Equal mptr_0 mint_0 mptr_1 mint_1 t u)) ->
    ((p_Equal mptr_1 mint_1 mptr_2 mint_2 s t)) ->
    ((p_Equal mptr_0 mint_0 mptr_2 mint_2 s u))

lemma Q_StackEqualSymmetric:
  forall s t : addr.
  forall mptr_0 mptr_1 : map addr addr.
  forall mint_0 mint_1 : map addr int.
  ((p_Equal mptr_0 mint_0 mptr_1 mint_1 s t)) ->
    ((p_Equal mptr_1 mint_1 mptr_0 mint_0 t s))

lemma Q_StackEqualReflexive:
  forall s : addr.
  forall mptr_0 : map addr addr.
  forall mint_0 : map addr int.
  (p_Equal mptr_0 mint_0 mptr_0 mint_0 s s)

axiom Q_TL_Size:
  forall s : addr.
  forall mint_0 : map addr int
  [(l_Size mint_0 s)].
  (is_uint32 ((l_Size mint_0 s)))

end

