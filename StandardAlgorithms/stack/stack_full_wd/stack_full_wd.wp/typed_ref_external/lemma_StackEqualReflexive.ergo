(* ---------------------------------------------------------- *)
(* --- Lemma 'StackEqualReflexive'                        --- *)
(* ---------------------------------------------------------- *)

(* --- Global Definitions   --- *)

function L_Size
    (Mint_0:(addr,int) farray,
    s_0:addr) :
    int =
    Mint_0[shift(s_0, 2)]

function L_Storage
    (Mptr_0:(addr,addr) farray,
    s_0:addr) :
    addr =
    Mptr_0[shift(s_0, 0)]

predicate P_EqualRanges_1_
    (Mint_0:(addr,int) farray,
    Mint_1:(addr,int) farray,
    a_0:addr,
    n_0:int,
    b_0:addr) =
    forall i_0 : int. (i_0 < n_0) -> (0 <= i_0) ->
    (Mint_0[shift(b_0, i_0)] = Mint_1[shift(a_0, i_0)])

predicate P_Equal
    (Mptr_0:(addr,addr) farray,
    Mint_0:(addr,int) farray,
    Mptr_1:(addr,addr) farray,
    Mint_1:(addr,int) farray,
    s_0:addr,
    t_0:addr) =
    let x_0 = L_Size(Mint_1, s_0) : int in (x_0 = L_Size(Mint_0, t_0)) and
    P_EqualRanges_1_(Mint_0, Mint_1, L_Storage(Mptr_1, s_0), x_0,
      L_Storage(Mptr_0, t_0))

goal lemma_StackEqualReflexive:
  forall Mint_0 : (addr,int) farray.
  forall Mptr_0 : (addr,addr) farray.
  forall s_0 : addr.
  P_Equal(Mptr_0, Mint_0, Mptr_0, Mint_0, s_0, s_0)

