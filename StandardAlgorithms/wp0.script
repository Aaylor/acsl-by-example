(* Generated by Frama-C WP *)

Goal typed_external_lemma_AccumulateDefaultRead.
Hint AccumulateDefaultRead,property.
Proof.
  Require Import Psatz.
  intros n.
  intros K L a H U.
  unfold L_AccumulateDefault.
  replace (K .[ shift_sint32 a 0]) with (L .[ shift_sint32 a 0]) by auto with zarith.
  rewrite A_Accumulate.Q_AccumulateRead with (t:=L); auto.
  unfold P_Unchanged_2_.
  unfold P_Unchanged_1_.
  intros.
  rewrite shift_associative.
  apply U; lia.
Qed.

Goal typed_external_lemma_AccumulateRead.
Hint AccumulateRead,property.
Proof.
  Require Import Psatz.
  intros n init.
  intros K L a.
  (* keep Unchanged in goal for later induction *)

  assert (nonpos_pos: (n <= 0 \/ n > 0)%Z) by tauto.
  destruct nonpos_pos as [nonpos|pos].
  {
    assert (AccK: L_Accumulate K a n init = init) by (now apply FixL_Accumulate).
    assert (AccL: L_Accumulate L a n init = init) by (now apply FixL_Accumulate).
    lia.
  }
  {
    (* now induction *)
    apply natlike_rec3 with (z := n); auto with zarith.
    {
      (* n = 0 *)
      assert (AccK: L_Accumulate K a 0 init = init) by (apply FixL_Accumulate; lia).
      assert (AccL: L_Accumulate L a 0 init = init) by (apply FixL_Accumulate; lia).
      lia.
    }
    {
      (* n > 0 *)
      intros z H IHz.
      replace (Z.pred z) with (z - 1)%Z in * by lia.
      assert (HK: (K.[shift_sint32 a (z - 1)] + L_Accumulate K a (z - 1) init = L_Accumulate K a z init)%Z).
      {
        apply (@FixL_Accumulate z init K a); lia.
      }
      assert (HL: (L.[shift_sint32 a (z - 1)] + L_Accumulate L a (z - 1) init = L_Accumulate L a z init)%Z).
      {
        apply (@FixL_Accumulate z init L a); lia.
      }
      intros U.
      rewrite <- HK.
      rewrite <- HL.
      rewrite IHz.
      - enough(K .[ shift_sint32 a (z - 1)] = L .[ shift_sint32 a (z - 1)]) by lia.
        rewrite U; lia.
      - apply A_UnchangedLemmas.Q_Unchanged_Shrink with (i_3:=0) (i_2:=z); auto with zarith.
    }
  }
Qed.

Goal typed_external_lemma_AdjacentDifferenceInverse.
Hint AdjacentDifferenceInverse,property.
Proof.
  Require Import Psatz.
  intros n L a b Nat_n.
  apply natlike_rec2 with (z := n); auto with zarith.
  {
    intros.
    unfold P_PartialSum.
    auto with zarith.
  }
  {
    (* induction step *)
    intros z Nat_z IHz Diff.
    unfold P_PartialSum.
    intros i. intros.
    replace (Z.succ z) with (1 + z) in * by lia.
    assert(less_equal: i < z \/ i = z) by lia.
    destruct less_equal as [less|equal].
    - apply IHz; auto with zarith.
    apply A_AdjacentDifference.Q_AdjacentDifferenceSection with (i:=1+z); auto with zarith.
    - rewrite equal.
      (* unfold P_AdjacentDifference in Diff. *)
      assert(zero_pos: z = 0 \/ z > 0) by lia.
      destruct zero_pos as [zero|pos].
      + rewrite zero.
        rewrite <- A_AccumulateDefault.Q_AccumulateDefault_Zero.
        rewrite Diff; auto with zarith.
      + replace z with (1 + (z-1)) by lia.
        rewrite <- A_AccumulateDefault.Q_AccumulateDefault_Next; auto with zarith.
        rewrite <- IHz; auto with zarith.
        * replace (1 + (z-1)) with z by lia.
          rewrite Diff; auto with zarith.
          rewrite A_Difference.Q_Difference_Next; lia.
        * apply A_AdjacentDifference.Q_AdjacentDifferenceSection with (i:=1+z); auto with zarith.
  }
Qed.

Goal typed_external_lemma_AdjacentDifferenceThenPartialSum.
Hint AdjacentDifferenceThenPartialSum,property.
Proof.
  Require Import Psatz.
  intros n L a b Nat_n.
  apply natlike_rec2 with (z := n); auto with zarith.
  {
    intros.
    unfold P_PartialSum.
    auto with zarith.
  }
  {
    (* induction step *)
    intros z Nat_z IHz Diff.
    unfold P_PartialSum.
    intros i. intros.
    replace (Z.succ z) with (1 + z) in * by lia.
    assert(less_equal: i < z \/ i = z) by lia.
    destruct less_equal as [less|equal].
    - apply IHz; auto with zarith.
    apply Q_AdjacentDifferenceSection with (i:=1+z); auto with zarith.
    - rewrite equal.
      (* unfold P_AdjacentDifference in Diff. *)
      assert(zero_pos: z = 0 \/ z > 0) by lia.
      destruct zero_pos as [zero|pos].
      + rewrite zero.
        rewrite <- Axiomatic4.Q_AccumulateDefault_Zero.
        rewrite Diff; auto with zarith.
      + replace z with (1 + (z-1)) by lia.
        rewrite <- Axiomatic4.Q_AccumulateDefault_Next; auto with zarith.
        rewrite <- IHz; auto with zarith.
        * replace (1 + (z-1)) with z by lia.
          rewrite Diff; auto with zarith.
          rewrite A_Difference.Q_Difference_Next; lia.
        * apply Q_AdjacentDifferenceSection with (i:=1+z); auto with zarith.
  }
Qed.

Goal typed_external_lemma_CircularShift_StrictLowerBound.
Hint CircularShift_StrictLowerBound,property.
Proof.
  Require Import Psatz.
  intros m n L K a. 
  intros.
  subst x. 
  subst x_1.
  unfold P_StrictLowerBound_1_ in *.
  intros.
  unfold P_EqualRanges_4_ in *.
  unfold P_EqualRanges_3_ in *.
  unfold P_EqualRanges_1_ in *.

  unfold shift_sint32 in *.

  replace m with (m + 0)%Z by lia.
  rewrite <- shift_associative.
  rewrite <- H1; auto with zarith.

  replace i with ((1 + m) + (i - (1 + m)))%Z by lia.
  rewrite <- shift_associative.
  rewrite <- H0; auto with zarith.

  rewrite shift_associative.
  rewrite shift_associative.

  replace (n + 0)%Z with n by lia.
  replace (m + (i - (1 + m)))%Z with (i - 1)%Z by lia.
  apply H; auto with zarith.
Qed.

Goal typed_external_lemma_CountInd_Count.
Hint CountInd_Count,property.
Proof.
  Require Import Psatz.
  intros v n L a IV.
  assert (n <= 0 \/ n > 0)%Z by tauto.
  destruct H as [le|gt].
  {
   assert (Nil: (L_Count_2_ L a n v = 0)%Z) by now apply A_Count.Q_Count_Empty.
   rewrite Nil.
    apply Q_Nil; auto with zarith.
  }
  apply natlike_rec3 with (z := n); auto with zarith.
  + assert (Nil: (L_Count_2_ L a 0 v = 0)%Z) by now apply A_Count.Q_Count_Empty.
    rewrite Nil.
    apply Q_Nil; auto with zarith.
  + intros z Z Step.
    replace (Z.pred z) with (z - 1)%Z in * by lia.
    assert (L.[shift a (z - 1)] <> v \/ L.[shift a (z - 1)] = v) by tauto.
    destruct H as [Ne|Eq].
    - assert (Miss: L_Count_2_ L a (z - 1) v = L_Count_2_ L a z v) by
      (apply A_Count.Q_Count_Miss; auto with zarith).
      rewrite <- Miss.
      apply Q_Miss; auto with zarith.
    - assert (Hit: (1 + L_Count_2_ L a (z - 1) v = L_Count_2_ L a z v)%Z) by
      (rewrite <- Eq in *; apply A_Count.Q_Count_Hit; auto with zarith).
      rewrite <- Hit.
      rewrite <- Eq in *.
      apply Q_Hit; auto with zarith.
Qed.

Goal typed_external_lemma_CountInd_Inverse.
Hint CountInd_Inverse,property.
Proof.
  Require Import Psatz. 
  intros v m n.
  intros L a.
  intros.
  inversion H0; subst; intuition.
  right.
  left.
  split; auto.
  split; auto.
  replace x with x0 in * by tauto.
  now replace (1 + i - 1)%Z with i by lia.
Qed.

Goal typed_external_lemma_CountInd_NonNegative.
Hint CountInd_NonNegative,property.
Proof.
intros.
induction H0; auto with zarith.
Qed.

Goal typed_external_lemma_CountInd_Read.
Hint CountInd_Read,property.
Proof.
  Require Import Psatz.
  intros v n sum.
  intros K L a.
  intros IV U.
  split.
  {
    intro CK.
    induction CK as [v i K a | v i sum K a | v i sum K].
    + now apply Q_Nil.
    + unfold x in *.
      assert (LK: L.[shift_sint32 a (i - 1)] = K.[shift_sint32 a (i - 1)]). {
        apply U; auto with zarith.
      }
      rewrite <- LK in *.
      apply Q_Hit; auto with zarith.
      apply IHCK; auto with zarith.
      apply A_UnchangedLemmas.Q_Unchanged_Shrink with  (i_3:=0%Z) (i_2:=i) ; auto with zarith.
    + unfold x in *.
      apply Q_Miss; auto with zarith.
      - assert (LK: L.[shift_sint32 a (i - 1)] = K.[shift_sint32 a (i - 1)]). {
          apply U; auto with zarith.
        }
        now rewrite LK.
      - apply IHCK; auto with zarith.
        apply A_UnchangedLemmas.Q_Unchanged_Shrink with (i_3:=0%Z) (i_2:=i); auto with zarith.
  }
  intro CL.
  induction CL as [v i L | v i sum L a | v i sum L].
  + now apply Q_Nil.
  + unfold x in *.
    assert (LK: L.[shift_sint32 a (i - 1)] = K.[shift_sint32 a (i - 1)]). {
      apply U; auto with zarith.
    }
    rewrite LK in *.
    apply Q_Hit; auto with zarith.
    apply IHCL; auto with zarith.
    apply A_UnchangedLemmas.Q_Unchanged_Shrink with (i_3:=0%Z) (i_2:=i); auto with zarith.
  + unfold x in *.
    apply Q_Miss; auto with zarith.
    - assert (LK: L.[shift_sint32 a (i - 1)] = K.[shift_sint32 a (i - 1)]). {
        apply U; auto with zarith.
      }
      now rewrite <- LK.
    - apply IHCL; auto with zarith.
      apply A_UnchangedLemmas.Q_Unchanged_Shrink with (i_3:=0%Z) (i_2:=i); auto with zarith.
Qed.

Goal typed_external_lemma_CountNotEqual_AllEqual.
Hint CountNotEqual_AllEqual,property.
Proof.
  Require Import Psatz.
  intros v m n L a mGE mLT V.
  remember (n-m)%Z as p.
  replace n with (m+p)%Z in * by lia.
  assert(pNN: (0 <= p)%Z) by lia.

  apply natlike_rec2 with (z:=p); auto with zarith.
  {
    replace (m+0)%Z with m by lia.
    intros All.
    rewrite A_CountNotEqual.Q_CountNotEqual_Empty; auto with zarith.
  }
  {
    intros z zNN IHz All.
    replace (m + Z.succ z)%Z with (1+(m+z))%Z in * by auto with zarith.
    rewrite A_CountNotEqual.Q_CountNotEqual_Miss; auto with zarith.
    apply IHz; auto with zarith.
    unfold P_AllEqual_1_; auto with zarith.
  }
Qed.

Goal typed_external_lemma_CountNotEqual_Count.
Hint CountNotEqual_Count,property.
Proof.
  Require Import Psatz.
  intros v m n L a mn_le V.

  pose (p := (n - m)%Z).
  replace n with (m + p)%Z in * by lia.
  assert(pNN: (0 <= p)%Z) by lia.

  apply natlike_rec2 with (z:=p); auto with zarith.
  {
    rewrite Q_CountNotEqual_Empty; auto with zarith.
    rewrite A_Count.Q_Count_Empty; auto with zarith.
  }
  {
    intros z zNN IHz.
    replace (m+Z.succ z)%Z with (1+(m+z))%Z by auto with zarith.
    assert(eq_neq: L.[ (shift_sint32 a (m+z)%Z) ] = v \/ L.[ (shift_sint32 a (m+z)%Z) ] <> v) by tauto.
    destruct eq_neq as [eq|neq].
    - rewrite Q_CountNotEqual_Miss; auto with zarith.
      rewrite <- A_Count.Q_Count_Hit; auto with zarith.
      + replace (1+(m+z)-1)%Z with (m+z)%Z by lia.
        auto with zarith.
      + now replace (1+(m+z)-1)%Z with (m+z)%Z by lia.
    - rewrite <- Q_CountNotEqual_Hit; auto with zarith.
      rewrite <- A_Count.Q_Count_Miss; auto with zarith.
      + replace (1+(m+z)-1)%Z with (m+z)%Z by auto with zarith.
        auto with zarith.
      + now replace (1+(m+z)-1)%Z with (m+z)%Z by auto with zarith.
  }
Qed.

Goal typed_external_lemma_CountNotEqual_Decrement.
Hint CountNotEqual_Decrement,property.
Proof.
  Require Import Psatz.
  intros v m n L a.
  intros mNN mLess V.
  remember (m + L_FindNotEqual_1_ L a m n v)%Z as x.

  assert(Union1: (L_CountNotEqual_1_ L a m n v = 
                 L_CountNotEqual_1_ L a m x v + L_CountNotEqual_1_ L a x n v)%Z).
  {
    rewrite <- A_CountNotEqual.Q_CountNotEqual_Union with (i_1:=x); auto with zarith.
    - enough (0 <= L_FindNotEqual_1_ L a m n v)%Z; auto with zarith.
      apply A_FindNotEqual.Q_FindNotEqual_Lower; by auto with zarith.
    - enough (m + L_FindNotEqual_1_ L a m n v <= n)%Z; auto with zarith.
      apply A_FindNotEqual.Q_FindNotEqual_Upper; by auto with zarith.
  }

  assert(Zero: (L_CountNotEqual_1_ L a m x v = 0)%Z).
  {
    subst x.
    rewrite Q_CountNotEqual_Zero; auto with zarith.
  }


  assert(Union2: (L_CountNotEqual_1_ L a 0 n v = 
             L_CountNotEqual_1_ L a 0 m v + L_CountNotEqual_1_ L a m n v)%Z).
  {
    rewrite <- A_CountNotEqual.Q_CountNotEqual_Union with (i_1 := m); auto with zarith.
  }

  rewrite Union2.
  
  auto with zarith.
  subst x.
  lia.
  rewrite X.
  rewrite <- A_CountNotEqual.Q_CountNotEqual_Hit; auto with zarith.
  rewrite A_CountNotEqual.Q_CountNotEqual_Empty; auto with zarith.
  rewrite Q_CountNotEqual_AllEqual; auto with zarith.
  + rewrite Heqx.
    enough(0 <= L_FindNotEqual_1_ L a (1 + m) n v)%Z; auto with zarith.
    apply A_FindNotEqual.Q_FindNotEqual_Lower; auto with zarith.
  + rewrite Heqx.
    apply A_FindNotEqual.Q_FindNotEqual_ResultAllEqual; auto with zarith.
Qed.

Goal typed_external_lemma_CountNotEqual_Increasing.
Hint CountNotEqual_Increasing,property.
Proof.
  Require Import Psatz.
  intros v k m n L a.
  intros MK KN V.

  remember (n-k)%Z as p.
  replace n with (k + p)%Z by lia.
  assert (pNN: (0 <= p)%Z) by lia.
  apply natlike_rec2 with (z := p); auto with zarith.
  {
    replace (k+0)%Z with k by lia.
    lia.
  }
  {
    intros z zNN IHz.
    replace (k + Z.succ z)%Z with (1+(k+z))%Z in * by lia.
    assert (eq_neq: L.[ shift a (k+z)] = v \/ L.[ shift a (k+z)] <> v) by lia.
    destruct eq_neq as [eq|neq].
    - rewrite Q_CountNotEqual_Miss; auto with zarith.
    - rewrite <- Q_CountNotEqual_Hit; auto with zarith.
  }
Qed.

Goal typed_external_lemma_CountNotEqual_Lower.
Hint CountNotEqual_Lower,property.
Proof.
  Require Import Psatz.
  intros v m n L a.
  intros MN V.

  remember (n-m)%Z as p.
  replace n with (m+p)%Z in * by lia.
  assert(pNN: (0 <= p)%Z) by lia.

  apply natlike_rec2 with (z:=p); auto with zarith.
  {
    rewrite Q_CountNotEqual_Empty; auto with zarith.
  }
  {
    intros z zNN IHz.
    replace (m + Z.succ z)%Z with (1 + (m+z))%Z by lia.
    assert(neq_eq: (L .[ shift_sint32 a (m + z)] <> v \/ L .[ shift_sint32 a (m + z)] = v)%Z) by lia.
    destruct neq_eq as [neq|eq].
    - rewrite <- Q_CountNotEqual_Hit; auto with zarith.
    - rewrite    Q_CountNotEqual_Miss; auto with zarith.
  }
Qed.

Goal typed_external_lemma_CountNotEqual_Read.
Hint CountNotEqual_Read,property.
Proof.
  Require Import Psatz.
  intros v m  n K L a V Unchanged.
  revert Unchanged.
  assert(lt_ge: (n < m \/ m <= n)%Z) by lia.
  destruct lt_ge as [lt|ge].
  {
    rewrite Q_CountNotEqual_Empty; auto with zarith.
    rewrite Q_CountNotEqual_Empty; auto with zarith.
  }
  {
    pose (p := (n - m)%Z).
    replace n with (m + p)%Z in * by lia.
    assert(pNN: (0 <= p)%Z) by lia.
    apply natlike_rec2 with (z:=p); auto with zarith.
    {
      rewrite Q_CountNotEqual_Empty; auto with zarith.
      rewrite Q_CountNotEqual_Empty; auto with zarith.
    }
    {
      intros z zNN IHz.
      replace (m + Z.succ z)%Z with (1+(m+z))%Z by lia.
      intros.

      assert(eq_neq: K.[ (shift_sint32 a (m+z)%Z) ] = v \/ K.[ (shift_sint32 a (m+z)%Z) ] <> v) by lia.
      destruct eq_neq as [eq|neq].
      - rewrite Q_CountNotEqual_Miss; auto with zarith.
        rewrite Q_CountNotEqual_Miss; auto with zarith.
        + rewrite IHz; auto with zarith.
          apply A_UnchangedLemmas.Q_Unchanged_Shrink with (i_3:=m%Z) (i_2:=(1+(m+z))%Z); auto with zarith.
        + rewrite <- eq; auto with zarith.
      - rewrite <- Q_CountNotEqual_Hit; auto with zarith.
        rewrite <- Q_CountNotEqual_Hit; auto with zarith.
        + rewrite IHz; auto with zarith.
          apply A_UnchangedLemmas.Q_Unchanged_Shrink with (i_3:=m%Z) (i_2:=(1+(m+z))%Z); auto with zarith.
        + rewrite Unchanged; auto with zarith.
    }
  }
Qed.

Goal typed_external_lemma_CountNotEqual_Upper.
Hint CountNotEqual_Upper,property.
Proof.
  Require Import Psatz.
  intros v m n L a.
  intros MN V.

  remember (n-m)%Z as p.
  replace n with (m+p)%Z in * by lia.
  assert(pNN: (0 <= p)%Z) by lia.

  apply natlike_rec2 with (z:=p); auto with zarith.
  {
    rewrite Q_CountNotEqual_Empty; auto with zarith.
  }
  {
    intros z zNN IHz.
    replace (m + Z.succ z)%Z with (1 + (m+z))%Z by lia.
    assert(neq_eq: (L .[ shift_sint32 a (m + z)] <> v \/ L .[ shift_sint32 a (m + z)] = v)%Z) by lia.
    destruct neq_eq as [neq|eq].
    - rewrite <- Q_CountNotEqual_Hit; auto with zarith.
    - rewrite    Q_CountNotEqual_Miss; auto with zarith.
  }
Qed.

Goal typed_external_lemma_Count_Bounds.
Hint Count_Bounds,property.
Proof.
  Require Import Psatz.
  intros v m n L a x mNN mn V.
  subst x.

  remember (n-m)%Z as p.
  replace n with (m + p)%Z by lia.
  apply natlike_rec3 with (z := p); auto with zarith.
  {
    rewrite Zplus_0_r.
    rewrite Q_Count_Empty; auto with zarith.
  }
  {
    intros.
    replace (m + Z.pred z)%Z with (m+z-1)%Z in * by lia.

    assert (X: L.[shift a (m+z-1)] =  v \/ L.[shift a (m+z-1)] <> v) by lia.
    destruct X as [eq|neq].
    - rewrite <- eq in *.
      rewrite <- Q_Count_Hit; auto with zarith.
    - rewrite <- Q_Count_Miss; auto with zarith.
  }
Qed.

Goal typed_external_lemma_Count_Increasing.
Hint Count_Increasing,property.
Proof.
  Require Import Psatz.
  intros v m n p.
  intros.

  replace p with (n + (p-n))%Z by lia.
  apply natlike_rec3 with (z := (p - n)%Z); auto with zarith.
  {
    replace (n+0)%Z with n by lia.
    lia.
  }
  {
    intros.
    replace (n + Z.pred z)%Z with ((n+z)-1)%Z in * by lia.
    apply  Z.ge_le.

    assert (X: t.[ shift a ((n+z) - 1)] =  v \/
               t.[ shift a ((n+z) - 1)] <> v) by lia.
    destruct X as [eq|neq].
    - rewrite <- eq in *.
      rewrite <- Q_Count_Hit; auto with zarith.
    - rewrite <- Q_Count_Miss; auto with zarith.
  }
Qed.

Goal typed_external_lemma_Count_Read.
Hint Count_Read,property.
Proof.
  Require Import Psatz.
  intros v m n L K a V.

  assert(X: (n <= m \/ n > m)%Z) by tauto.
  destruct X as [leq|greater].
  {
    intros.
    rewrite Q_Count_Empty; auto with zarith.
    rewrite Q_Count_Empty; auto with zarith.
  }
  {
    pose (p := (n - m)%Z).
    replace n with (m + p)%Z in * by (subst p; auto with zarith).
    assert(Pos: (p > 0)%Z) by lia.

    apply natlike_rec3 with (z := p); auto with zarith.
    {
      intros.
      rewrite Q_Count_Empty; auto with zarith.
      rewrite Q_Count_Empty; auto with zarith.
    }
    {
      intros.
      replace (m + Z.pred z)%Z with ((m + z)-1)%Z in * by lia.
      assert (Equal: L.[ shift_sint32 a ((m + z)-1)] = 
                     K.[ shift_sint32 a ((m + z)-1)])  by (rewrite H1; lia).

      assert (Value: L.[ shift_sint32 a (m + z - 1)] = v \/ 
                     L.[ shift_sint32 a (m + z - 1)] <> v) by tauto.
      destruct Value as [eq|neq].
      - assert(eq_K: K .[ shift_sint32 a (m + z - 1)] = v) by auto with zarith.
        rewrite <- eq.
        rewrite <- Q_Count_Hit; auto with zarith.
        + rewrite Equal.
          symmetry.
          rewrite <- Q_Count_Hit; auto with zarith.
          * rewrite eq_K.
            enough (L_Count_1_ L a m (m + z - 1) v = L_Count_1_ K a m (m + z -1 ) v) by lia.
            apply H0.
            apply A_UnchangedLemmas.Q_Unchanged_Shrink with  (m) ((m+z)%Z); auto with zarith.
          * now rewrite eq_K.
        + now rewrite eq.
      - assert(neq_K: K .[ shift_sint32 a (m + z - 1)] <> v) by auto with zarith.
        rewrite <- Q_Count_Miss; auto with zarith.
        symmetry.
        rewrite <- Q_Count_Miss; auto with zarith.
        symmetry.
        apply H0.
        apply A_UnchangedLemmas.Q_Unchanged_Shrink with  (m) ((m+z)%Z); auto with zarith.
    }
  }
Qed.

Goal typed_external_lemma_Count_Shift.
Hint Count_Shift,property.
Proof.
  Require Import Psatz.
  intros v m n t a.
  intros.

  apply natlike_rec2 with (z := n); auto with zarith.
  {
    replace (0 + m)%Z with m by lia.
    rewrite Q_Count_Empty; auto with zarith.
    rewrite Q_Count_Empty; auto with zarith.
  }
  {
    intros.
    replace (Z.succ z) with (1 + z)%Z by auto with zarith.
    rewrite <- Q_Count_One; auto with zarith.
    replace (1 + z + m)%Z with (1 + (z + m))%Z by lia.
    symmetry.
    rewrite <- Q_Count_One; auto with zarith.

    cut(L_Count_1_ t a (z + m) (1 + (z + m)) v =
        L_Count_1_ t (shift_sint32 a m) z (1 + z) v).
    {
      intros.
      rewrite H3.
      rewrite <- H4.
      trivial.
    }
    {
      remember (t.[shift_sint32 a (z + m)]) as azm.
      assert (X: azm = v \/ azm <> v) by lia.
      destruct X as [eq|neq].
      {
        subst azm.
        remember  (z + m)%Z   as  zm.
        remember  (1 + zm)%Z  as  zm1.
        replace zm with (zm1 - 1)%Z in * by lia.
        rewrite <- eq in *.
        rewrite <- Q_Count_Hit; auto with zarith.
        rewrite Q_Count_Empty; auto with zarith.

        remember (shift_sint32 a m) as am.
        remember (1 + z)%Z as z1.
        assert(remember_z: z = (z1 - 1)%Z) by lia.
        rewrite remember_z in *.
        enough (Y: t.[ shift_sint32 a (zm1 - 1)] = t.[shift_sint32 am (z1 - 1)]).
        - rewrite Y in *.
          rewrite <- Q_Count_Hit; auto with zarith.
          rewrite Q_Count_Empty; auto with zarith.
        - subst am.
          rewrite Heqzm in *.
          rewrite <- remember_z in *.
          unfold shift_sint32.
          rewrite shift_associative.
          now replace (z + m)%Z with (m + z)%Z by lia.
      }
      {
         rewrite <- Q_Count_Miss; auto with zarith.
         rewrite Q_Count_Empty; auto with zarith.
         rewrite <- Q_Count_Miss; auto with zarith.
         - replace (1 + z - 1)%Z with z by lia.
           rewrite Q_Count_Empty; auto with zarith.
         - replace (1 + z - 1)%Z with z by lia.
           unfold shift_sint32 in *.
           rewrite shift_associative.
           replace (m + z)%Z with (z + m)%Z by lia.
           lia.
         - replace (1 + (z + m) - 1)%Z with (z + m)%Z by lia.
           lia.
       }
    }
  }


Qed.

Goal typed_external_lemma_Count_SomeEqual.
Hint Count_SomeEqual,property.
Proof.
  Require Import Psatz.
  intros v m n L a.
  intros NN Less.

  remember (n - m)%Z as p.
  assert (Pos: (0 < p)%Z) by lia.

  replace n with (m + p)%Z in * by lia.
  apply natlike_rec3 with (z := p); auto with zarith.
  {
    intros.
    rewrite A_Count.Q_Count_Empty in H; auto with zarith.
    lia.
  }
  {
    intros z zPOs IHz IH V.

    replace (Z.pred z) with (z-1)%Z in * by lia.
    replace (m + (z - 1))%Z with (m + z - 1)%Z in * by lia.

    assert (Value: L.[ shift a (m + z - 1)] = v \/ L.[ shift a (m + z - 1)] <> v) by tauto.
    destruct Value as [eq|neq].
    {
      unfold P_SomeEqual_1_.
      exists (m + z - 1)%Z.
      split; auto with zarith.
    }
    {
      rewrite <- A_Count.Q_Count_Miss in IH; auto with zarith.
      cut (P_SomeEqual_1_ L a m (m + z - 1) v).
      + unfold P_SomeEqual_1_ .
        intros X.
        destruct X as [k [P Q]].
        exists k.
        split; auto with zarith.
      + now apply IHz.
    }
  }
Qed.

Goal typed_external_lemma_Count_Union.
Hint Count_Union,property.
Proof.
  Require Import Psatz.
  intros v k m n L a.
  intros.

  replace n with (m + (n-m))%Z by lia.
  apply natlike_rec3 with (z := (n - m)%Z); auto with zarith.
  {
    rewrite Zplus_0_r.
    rewrite Q_Count_Empty; auto with zarith.
  }
  {
    intros.
    replace (m + Z.pred z)%Z with ((m+z)-1)%Z in * by lia.

    assert (X: v = L.[ shift a (m+z-1)] \/ v <> L.[ shift a (m+z-1)]) by tauto.
    destruct X as [eq|neq].
    {
      rewrite eq in *.
      rewrite <- Q_Count_Hit; auto with zarith.
      symmetry.
      rewrite <- Q_Count_Hit; auto with zarith.
    }
    {
      rewrite <- Q_Count_Miss; auto with zarith.
      symmetry.
      rewrite <- Q_Count_Miss; auto with zarith.
    }
  }

Qed.

Goal typed_external_lemma_EqualRangesCount.
Hint EqualRangesCount,property.
Proof.
  Require Import Psatz.
  intros v m n p L K a. intros P Q V.

  pose (k := (n - m)%Z).
  replace n with (m + k)%Z in * by lia.
  assert(kNN: (0 <= k)%Z) by lia.

  apply natlike_rec2 with (z := k); auto with zarith.
  {
    intros.
    rewrite Zplus_0_r in *.
    replace (p + m - m)%Z with p by lia.
    rewrite A_Count.Q_Count_Empty; auto with zarith.
    rewrite A_Count.Q_Count_Empty; auto with zarith.
  }
  {
    intros z.
    replace (p + (m + z) - m)%Z with (p + z)%Z by lia.
    replace (m + Z.succ z)%Z with (1 + (m+z))%Z by lia.
    replace (p + (1 + (m + z)) - m)%Z with (1 + (p + z))%Z by lia.
    intros.
    assert(Y: P_EqualRanges_4_ L K a m (m + z) p).
    {
      unfold P_EqualRanges_4_ in *.
      unfold P_EqualRanges_3_ in *.
      unfold P_EqualRanges_1_ in *.
      intros.
      rewrite H1; auto with zarith.
    }

    assert (X: K.[ shift a (m+z)] =  v \/ K.[ shift a (m+z)] <> v) by lia.
    destruct X as [eq|neq].
    {
      assert(APZ: v = L.[ shift a (p + z)]).
      {
          rewrite <- eq.
          rewrite <- shift_associative.
          replace (K .[ shift (shift a m) z]) with (K.[ shift (shift a m) z]) by auto.
          rewrite H1; auto with zarith.
          rewrite shift_associative; auto.
      }
      remember  (p + z)%Z as pz.
      remember  (1 + pz)%Z as pz1.
      replace   pz with (pz1 - 1)%Z in * by lia.
      rewrite APZ in *.
      rewrite <- A_Count.Q_Count_Hit; auto with zarith.
      rewrite Heqpz in *.

      symmetry.
      remember  (m + z)%Z as mz.
      remember  (1 + mz)%Z as mz1.
      replace   mz with (mz1 - 1)%Z in * by lia.
      rewrite <- APZ in *.
      rewrite <- eq in *.
      rewrite <- A_Count.Q_Count_Hit; auto with zarith.
      symmetry.
      auto with zarith.
    }
    {
      rewrite <- A_Count.Q_Count_Miss; auto with zarith.
      - replace (1 + (p + z) - 1)%Z with (p + z)%Z by lia.
        symmetry.
        rewrite <- A_Count.Q_Count_Miss; auto with zarith.
        + replace (1 + (m + z) - 1)%Z with (m + z)%Z by lia.
          symmetry.
          auto with zarith.
        + replace (1 + (m + z) - 1)%Z with (m + z)%Z by lia.
          auto.
      - replace (1 + (p + z) - 1)%Z with (p + z)%Z by lia.
        unfold P_EqualRanges_4_ in H1.
        unfold P_EqualRanges_3_ in H1.
        unfold P_EqualRanges_1_ in H1.
        rewrite <- shift_associative; auto with zarith.
        rewrite <- H1; auto with zarith.
        rewrite shift_associative; auto with zarith.
    }
  }
Qed.

Goal typed_external_lemma_EqualRangesIncreasing.
Hint EqualRangesIncreasing,property.
Proof.
 Require Import Psatz.
 intros m n p L K a; intros.
 subst x.
 unfold P_Increasing_1_.
 unfold P_EqualRanges_4_ in *.
 unfold P_EqualRanges_3_ in *.
 unfold P_EqualRanges_1_ in *.
 intros i j; intros.

 replace i with ((p + m) + (i - p - m))%Z by lia.
 rewrite <- shift_associative.
 rewrite <- H0; auto with zarith.

 replace j with ((p + m) + (j - p - m))%Z by lia.
 rewrite <- shift_associative.
 rewrite <- H0; auto with zarith.

 rewrite shift_associative.
 rewrite shift_associative.

 apply H; auto with zarith.
Qed.

Goal typed_external_lemma_FindNotEqual_AllEqual.
Hint FindNotEqual_AllEqual,property.
Proof.
  Require Import Psatz.
  intros v m n L a MN V All.

  remember (n-m)%Z as p.
  replace n with (p+m)%Z in * by lia.
  assert(pNN: (0 <= p)%Z) by lia.
  revert MN All.

  apply natlike_rec2 with (z:=p); auto with zarith.
  {
    intros.
    replace (0+m)%Z with m by lia.
    rewrite Q_FindNotEqual_Empty; auto with zarith.
  }
  {
    intros z zNN IHz. intros.
    replace (Z.succ z + m)%Z with (1+(z+m))%Z in * by lia.
    rewrite Q_FindNotEqual_MissMiss; auto with zarith.
    apply IHz; auto with zarith.
    unfold P_AllEqual_1_.
    intros; auto with zarith.
  }

Qed.

Goal typed_external_lemma_FindNotEqual_Extend.
Hint FindNotEqual_Extend,property.
Proof.
  Require Import Psatz.
  intros v k m n L a Neq Found m0 mn V.
  pose (p := (n - m)%Z).
  replace n with (m + p)%Z in * by (subst p; auto with zarith).
  assert(pPos: (p > 0)%Z) by auto with zarith.
  revert mn.

  apply natlike_rec2 with (z := p); auto with zarith.
  intros z zNN IHz.
  intros.
  replace (m + (Z.succ z))%Z with (1+(m+z))%Z in * by lia.
  assert(less_equal: (k < m+z \/ k = m+z)%Z) by lia.
  destruct less_equal as [less|equal].
  - rewrite Q_FindNotEqual_Hit; auto with zarith.
    rewrite IHz; auto with zarith.
  - rewrite equal in *.
    rewrite Q_FindNotEqual_MissHit; auto with zarith.
Qed.

Goal typed_external_lemma_FindNotEqual_Increasing.
Hint FindNotEqual_Increasing,property.
Proof.
  Require Import Psatz.
  intros v k m n L a Lower Upper V.

  remember (n-m)%Z as p.
  assert(pNN: (0 <= p)%Z) by lia.
  replace n with (m+p)%Z in * by lia.
  revert Upper.

  apply natlike_rec2 with (z:=p); auto with zarith.
  {
    intros.
    rewrite Zplus_0_r in *.
    rewrite Q_FindNotEqual_Empty; auto with zarith.
    rewrite Q_FindNotEqual_Empty; auto with zarith.
  }
  {
    intros z zNN IHz. intros.
    replace (m + Z.succ z)%Z with (1+(m+z))%Z in * by lia.
    assert(X: (L_FindNotEqual_1_ L a m (m+z) v <= L_FindNotEqual_1_ L a m (1+(m+z)) v)%Z) by
      (apply Q_FindNotEqual_WeaklyIncreasing; auto with zarith).
    assert(le_eq: (k <= m+z \/ k = 1+(m+z))%Z) by lia.
    destruct le_eq as [le|eq].
    - assert(Y: (L_FindNotEqual_1_ L a m k v <= L_FindNotEqual_1_ L a m (m+z) v)%Z) by 
        (apply IHz; auto with zarith).
      lia.
    - rewrite eq; lia.
  }
Qed.

Goal typed_external_lemma_FindNotEqual_Limit.
Hint FindNotEqual_Limit,property.
Proof.
  Require Import Psatz.
  intros v k m n L a.
  intros Found Lower Upper V.

  remember (n-m)%Z as p.
  replace n with (m+p)%Z in * by lia.
  assert (pPos : (0 < p)%Z) by lia.
  revert Upper.

  apply natlike_rec2 with (z := p); auto with zarith.
  intros z zNN IHz.
  intros.
  replace (m+Z.succ z)%Z with (1+(m+z))%Z in * by lia.
  assert(less_equal: (k < m+z \/ k = m+z)%Z) by lia.
  destruct less_equal as [less|equal].
  - rewrite Q_FindNotEqual_Hit; auto with zarith.
    lia.
  - rewrite equal in *.
    clear IHz Upper equal.
    assert(U: (m+L_FindNotEqual_1_ L a m (m+z) v <= m+z)%Z).
    + apply Q_FindNotEqual_Upper; auto with zarith.
    + assert(hit_miss: (L_FindNotEqual_1_ L a m (m+z) v < z \/ L_FindNotEqual_1_ L a m (m+z) v = z)%Z) by lia.
      destruct hit_miss as [hit|miss].
      * rewrite Q_FindNotEqual_Hit; auto with zarith.
      * rewrite Q_FindNotEqual_MissHit; auto with zarith.
Qed.

Goal typed_external_lemma_FindNotEqual_Read.
Hint FindNotEqual_Read,property.
Proof.
  Require Import Psatz.
  intros v m n K L a V.
  remember (n-m)%Z as p.
  replace n with (m+p)%Z by lia.
  assert(nonpos_pos: (p <= 0 \/ 0 < p)%Z) by lia.
  destruct nonpos_pos as [nonpos|pos].
  {
    intros.
    rewrite Q_FindNotEqual_Empty; auto with zarith.
    rewrite Q_FindNotEqual_Empty; auto with zarith.
  }
  {
    apply natlike_rec2 with (z:=p); auto with zarith.
    {
      intros.
      rewrite Q_FindNotEqual_Empty; auto with zarith.
      rewrite Q_FindNotEqual_Empty; auto with zarith.
    }
    {
      intros z zNN IHz.
      intro.
      replace (m + Z.succ z)%Z with (1+(m+z))%Z in * by lia.
      replace (Z.succ z) with (1+z)%Z in * by lia.

      assert(Unchanged: P_Unchanged_1_ K L a m (m + z)).
      {
        apply A_UnchangedLemmas.Q_Unchanged_Shrink 
                with (i_2:=(1 + (m + z))%Z) (i_3:=m); auto with zarith.
      }
      assert (found_notfound: (m + L_FindNotEqual_1_ K a m (m + z) v < m + z  \/
                               m + L_FindNotEqual_1_ K a m (m + z) v = m + z)%Z).
      {
        assert(m + L_FindNotEqual_1_ K a m (m + z) v <= m+z)%Z.
        - apply Q_FindNotEqual_Upper; auto with zarith.
        - lia.
      }
      assert(eq_neq: K.[ (shift_sint32 a (m+z)%Z) ] = v \/ K.[ (shift_sint32 a (m+z)%Z) ] <> v) by lia.

      destruct found_notfound as [found|notfound]; auto with zarith.
      {
        destruct eq_neq as [eq|neq].
        {
          assert(L .[ shift_sint32 a (m + z)] = v) by (rewrite H; auto with zarith).
          rewrite Q_FindNotEqual_Hit; auto with zarith.
          rewrite Q_FindNotEqual_Hit; auto with zarith.
          rewrite <- IHz; auto with zarith.
        }
        {
          rewrite Q_FindNotEqual_Hit; auto with zarith.
          rewrite Q_FindNotEqual_Hit; auto with zarith.
          rewrite <- IHz; auto with zarith.
        }
      }
      {
        destruct eq_neq as [eq|neq].
        {
          assert(L .[ shift_sint32 a (m + z)] = v) by (rewrite H; auto with zarith).
          enough(m + L_FindNotEqual_1_ K a m (1 + (m + z)) v =
                 m + L_FindNotEqual_1_ L a m (1 + (m + z)) v)%Z by lia.
          rewrite Q_FindNotEqual_MissMiss with (t:=K) (a:=a) (i_2:=v) (i_1:=m%Z); auto with zarith.
          rewrite Q_FindNotEqual_MissMiss with (t:=L) (a:=a) (i_2:=v) (i_1:=m%Z); auto with zarith.
          rewrite <- IHz; auto with zarith.
        }
        {
          enough(m + L_FindNotEqual_1_ K a m (1 + (m + z)) v =
                 m + L_FindNotEqual_1_ L a m (1 + (m + z)) v)%Z by lia.
          rewrite Q_FindNotEqual_MissHit with (t:=K) (a:=a) (i_2:=v) (i_1:=m%Z); auto with zarith.
          symmetry.
          rewrite Q_FindNotEqual_MissHit with (t:=L) (a:=a) (i_2:=v) (i_1:=m%Z); auto with zarith.
          - rewrite H; auto with zarith.
          - rewrite <- IHz; auto with zarith.
        }
      }
    }
  }
Qed.

Goal typed_external_lemma_Find_Extend.
Hint Find_Extend,property.
Proof.
  Require Import Psatz.
  intros v k m n L a Neq Found m0 mn V.
  pose (p := (n - m)%Z).
  replace n with (m + p)%Z in * by (subst p; auto with zarith).
  assert(pPos: (p > 0)%Z) by auto with zarith.
  revert mn.

  apply natlike_rec2 with (z := p); auto with zarith.
  intros z zNN IHz.
  intros.
  replace (m + (Z.succ z))%Z with (1+(m+z))%Z in * by lia.
  assert(less_equal: (k < m+z \/ k = m+z)%Z) by lia.
  destruct less_equal as [less|equal].
  - rewrite Q_Find_Hit; auto with zarith.
    rewrite IHz; auto with zarith.
  - rewrite equal in *.
    rewrite Q_Find_MissHit; auto with zarith.
Qed.

Goal typed_external_lemma_Find_Increasing.
Hint Find_Increasing,property.
Proof.
  Require Import Psatz.
  intros v k m n L a Lower Upper V.

  remember (n-m)%Z as p.
  assert(pNN: (0 <= p)%Z) by lia.
  replace n with (m+p)%Z in * by lia.
  revert Upper.

  apply natlike_rec2 with (z:=p); auto with zarith.
  {
    intros.
    rewrite Zplus_0_r in *.
    rewrite Q_Find_Empty; auto with zarith.
    rewrite Q_Find_Empty; auto with zarith.
  }
  {
    intros z zNN IHz. intros.
    replace (m + Z.succ z)%Z with (1+(m+z))%Z in * by lia.
    assert(X: (L_Find_1_ L a m (m+z) v <= L_Find_1_ L a m (1+(m+z)) v)%Z) by
      (apply Q_Find_WeaklyIncreasing; auto with zarith).
    assert(le_eq: (k <= m+z \/ k = 1+(m+z))%Z) by lia.
    destruct le_eq as [le|eq].
    - assert(Y: (L_Find_1_ L a m k v <= L_Find_1_ L a m (m+z) v)%Z) by 
        (apply IHz; auto with zarith).
      lia.
    - rewrite eq; lia.
  }
Qed.

Goal typed_external_lemma_Find_Limit.
Hint Find_Limit,property.
Proof.
  Require Import Psatz.
  intros v k m n L a.
  intros Found Lower Upper V.

  remember (n-m)%Z as p.
  replace n with (m+p)%Z in * by lia.
  assert (pPos : (0 < p)%Z) by lia.
  revert Upper.

  apply natlike_rec2 with (z := p); auto with zarith.
  intros z zNN IHz.
  intros.
  replace (m+Z.succ z)%Z with (1+(m+z))%Z in * by lia.
  assert(less_equal: (k < m+z \/ k = m+z)%Z) by lia.
  destruct less_equal as [less|equal].
  - rewrite Q_Find_Hit; auto with zarith.
    lia.
  - rewrite equal in *.
    clear IHz Upper equal.
    assert(U: (m+L_Find_1_ L a m (m+z) v <= m+z)%Z).
    + apply Q_Find_Upper; auto with zarith.
    + assert(hit_miss: (L_Find_1_ L a m (m+z) v < z \/ L_Find_1_ L a m (m+z) v = z)%Z) by lia.
      destruct hit_miss as [hit|miss].
      * rewrite Q_Find_Hit; auto with zarith.
      * rewrite Q_Find_MissHit; auto with zarith.
Qed.

Goal typed_external_lemma_Find_None.
Hint Find_None,property.
Proof.
  intros v n L a N V.
  assert(N' := N).
  revert N.
  apply natlike_rec2 with (z := n); auto with zarith.
  {
    intros.
    rewrite A_Find.Q_Find_Empty; auto with zarith.
  }
  {
    intros z Z IHz.
    intros.
    replace (Z.succ z) with (1+z)%Z in * by auto with zarith.
    assert(X: (forall (i: int), 0 <= i <= z -> L .[ shift_sint32 a i] <> v)%Z).
    {
      intuition.
      unfold P_HasValue_2_ in H.
      unfold P_HasValue_1_ in H.
      apply H.
      exists i%Z; auto with zarith.
    }

    rewrite <- A_Find.Q_Find_Miss_Miss; auto with zarith.
    apply IHz; auto with zarith.
    intuition.
    unfold P_HasValue_2_ in H0.
    unfold P_HasValue_1_ in H0.
    destruct H0 as [j [A B]].
    apply X with (i:=j); auto with zarith.
  }
Qed.

Goal typed_external_lemma_Find_NoneEqual.
Hint Find_NoneEqual,property.
Proof.
  Require Import Psatz.
  intros v m n L a MN V None.

  remember (n-m)%Z as p.
  replace n with (p+m)%Z in * by lia.
  assert(pNN: (0 <= p)%Z) by lia.
  revert MN None.

  apply natlike_rec2 with (z:=p); auto with zarith.
  {
    intros.
    replace (0+m)%Z with m by lia.
    rewrite Q_Find_Empty; auto with zarith.
  }
  {
    intros z zNN IHz. intros.
    replace (Z.succ z + m)%Z with (1+(z+m))%Z in * by lia.
    rewrite Q_Find_MissMiss; auto with zarith.
    rewrite IHz; auto with zarith.
    unfold P_NoneEqual_1_.
    intros.
    apply None; auto with zarith.
  }
Qed.

Goal typed_external_lemma_HeapMaximum.
Hint HeapMaximum,property.
Proof.
  Require Import Psatz.
  intros n L a Pos.
  assert(Pos1:=Pos).
  revert Pos.
  apply natlike_rec2 with (z := n); auto with zarith.
  {
    intros; lia. 
  }
  {
    intros z zNN IHz.
    intros.
    replace (Z.succ z) with (1+z)%Z in * by lia.
    assert(X: P_Heap L a z).
    {
      unfold P_Heap.
      intros.
      apply H; auto with zarith.
    }
    assert(zero_pos: z = 0 \/ 0 < z) by lia.
    destruct zero_pos as [zero|pos].
    {
      replace (1+z) with 1 in * by lia.
      unfold P_MaxElement.
      split; auto with zarith.
      split; auto with zarith.
      unfold A_ArrayBounds.P_UpperBound_2_.
      unfold A_ArrayBounds.P_UpperBound_1_.
      intros.
      now replace i with 0 by lia.
    }
    {
      assert(Y: P_MaxElement L a z 0) by (apply IHz; auto with zarith).
      unfold P_MaxElement.
      split; auto with zarith.
      split; auto with zarith.
      unfold A_ArrayBounds.P_UpperBound_2_.
      unfold A_ArrayBounds.P_UpperBound_1_.
      intros.
      assert(less_equal: i < z \/ i = z) by lia.
      destruct less_equal as [less|equal].
      - apply IHz; auto with zarith.
      - rewrite equal in *.
        assert(A: (L.[shift a z] <= L.[shift a (L_HeapParent  z)])%Z) by
          (apply H; auto with zarith).
        assert(B: (L.[shift a (L_HeapParent  z)] <= L.[shift a 0])%Z).
        {
          apply IHz; auto with zarith.
          unfold L_HeapParent.
          - apply A_C_Division.Q_C_Division_Two; lia.
          - unfold L_HeapParent.
            enough (Cdiv (z-1) 2 <= z-1)%Z; auto with zarith.
            apply A_C_Division.Q_C_Division_Two; lia.
        }
        unfold Compound.shift_sint32; lia.
     }
  }
Qed.

Goal typed_external_lemma_IncreasingShift.
Hint IncreasingShift,property.
Proof.
  intros m n L a.
  intros.
  unfold P_Increasing_2_.
  unfold P_Increasing_1_ in *.
  intros.
  rewrite shift_associative.
  rewrite shift_associative.
  apply H1; auto with zarith.
Qed.

Goal typed_external_lemma_InnerProductRead.
Hint InnerProductRead,property.
Proof.
  Require Import Psatz.
  intros init n L K a b.
  intro.
  assert (X: (n <= 0 \/ n > 0)%Z) by lia.
  destruct X as [lez|gtz].
  {
    intros.
    assert (L_InnerProduct L a b n init = init).
    {
      now apply FixL_InnerProduct.
    }
    assert (L_InnerProduct K a b n init = init).
    {
      now apply FixL_InnerProduct.
    }
    now rewrite H2.
  }
  apply natlike_rec3 with (z := n); auto with zarith.
  {
    intros.
    assert (L_InnerProduct L a b 0 init = init).
    {
      now apply FixL_InnerProduct.
    }
    assert (L_InnerProduct K a b 0 init = init).
    {
      now apply FixL_InnerProduct.
    }
    now rewrite H2.
  }

  intro.
  replace (Z.pred z) with (z - 1)%Z in * by lia.
  intros.

  assert (IHL: ((L_InnerProduct L a b (z-1) init) + 
                (L.[shift_sint32 b (z-1)]) * (L.[shift_sint32 a (z-1)]) 
               = L_InnerProduct L a b z init)%Z ).  
  {
    apply (@FixL_InnerProduct z init L a b); lia.
  }
  rewrite <- IHL.

  assert (IHK: ((L_InnerProduct K a b (z-1) init) + 
                (K.[shift_sint32 b (z-1)]) * (K.[shift_sint32 a (z-1)]) 
               = L_InnerProduct K a b z init)%Z ). 
  {
    apply (@FixL_InnerProduct z init K a b); lia.
  }
  rewrite <- IHK.

  assert (KLa: K.[ shift_sint32 b (z - 1)] = L.[ shift_sint32 b (z - 1)]) by (apply H3; lia).
  rewrite KLa.
  assert (KLb: K.[ shift_sint32 a (z - 1)] = L.[ shift_sint32 a (z - 1)]) by (apply H2; lia).
  rewrite KLb.
  enough (L_InnerProduct L a b (z-1) init = L_InnerProduct K a b (z-1) init) by lia.
  apply H1.
  - apply A_UnchangedLemmas.Q_Unchanged_Shrink with (i_3:=0%Z) (i_2:=z); auto with zarith.
  - apply A_UnchangedLemmas.Q_Unchanged_Shrink with (i_3:=0%Z) (i_2:=z); auto with zarith. 
Qed.

Goal typed_external_lemma_LowerBoundShift.
Hint LowerBoundShift,property.
Proof.
  Require Import Psatz.
  unfold P_LowerBound_1_.
  intros val b c d L a H0 LowerBound i X Y.

  replace i with (b + (i - b))%Z by lia.
  rewrite <- shift_associative.
  apply LowerBound; lia.

Qed.

Goal typed_external_lemma_MultisetUnchangedUnion.
Hint MultisetUnchangedUnion,property.
Proof.
  unfold P_MultisetUnchanged_1_ in *.
  intros.
  remember i0 as v.
  remember i as n.
  remember i_1 as k.

  rewrite Q_CountSectionUnion with (i_1 := k); auto with zarith.
  symmetry.
  rewrite Q_CountSectionUnion with (i_1 := k); auto with zarith.
  rewrite H1; auto with zarith.
  rewrite H2; auto with zarith.

Qed.

Goal typed_external_lemma_RemoveCopy_Skip.
Hint RemoveCopy_Skip,property.
Proof.
  Require Import Psatz.
  intros v m n L K a b.
  intros Equal mNN Less V Ua Ub Ka.
  unfold P_RemoveCopy in *.
  intros.
  unfold L_CountNotEqual_2_ in *.
  assert(A: (L_CountNotEqual_1_ L a 0 (1 + m) v = L_CountNotEqual_1_ L a 0 m v)%Z)
            by (rewrite A_CountNotEqual.Q_CountNotEqual_Miss; auto with zarith).
  rewrite A in H0.
  assert(B: (i < L_CountNotEqual_1_ K a 0 m v)%Z).
  {
    rewrite <- A_CountNotEqual.Q_CountNotEqual_Read with (t_1:=L); auto with zarith.
    apply A_Unchanged.Q_Unchanged_Shrink with (i:=n); auto with zarith.
  }

  (* get rid of (1+m) *)
  assert (mPos: (0 < m)%Z).  {
    assert((0 = m \/ 0 < m)%Z) by lia.
    destruct H1.
    rewrite <- H1 in H0.
    rewrite A_CountNotEqual.Q_CountNotEqual_Empty in H0; auto with zarith.
    trivial.
  }
  rewrite A_RemovePartition.Q_RemovePartition_Extend; auto with zarith.
  rewrite A_RemovePartition.Q_RemovePartition_Read with (t:=K); auto with zarith.
  {
    replace(L .[ shift_sint32 b i]) with (K .[ shift_sint32 b i]).
    {
      replace (L .[ shift_sint32 a (L_RemovePartition K a m v i)]) with
              (K .[ shift_sint32 a (L_RemovePartition K a m v i)]).
      - rewrite Ka; auto with zarith.
      - symmetry.
        rewrite Ua; auto with zarith.
        + apply A_RemovePartition.Q_RemovePartition_Lower; auto with zarith.
        + enough(L_RemovePartition K a m v i < m)%Z by lia.
          apply A_RemovePartition.Q_RemovePartition_Upper; auto with zarith.
    }
    {
      rewrite Ub; auto with zarith.
      enough (0 + L_CountNotEqual_1_ L a 0 m v <= m)%Z by lia.
      apply A_CountNotEqual.Q_CountNotEqual_Upper; auto with zarith.
    }
  }
  {
    unfold P_Unchanged_2_.
    apply A_Unchanged.Q_Unchanged_Shrink with (i:=n); auto with zarith.
  }
Qed.

Goal typed_external_lemma_RemoveImpliesNotHasValue.
Hint RemoveImpliesNotHasValue,property.
Proof.
(* auto with zarith. *)
Qed.

Goal typed_external_lemma_RemovePartition_Core.
Hint RemovePartition_Core,property.
Proof.
  Require Import Psatz.
  intros v n p L a.
  intros x nPos pNN Less V.
  unfold L_CountNotEqual_2_ in *.
  subst x.
  revert Less.

  apply natlike_rec2 with (z:=p); auto with zarith.
  {
    intros.
    rewrite <- Q_RemovePartition_Next; auto with zarith.
    rewrite Q_RemovePartition_Left; auto with zarith.
    replace (1 + -1)%Z with 0%Z by lia.

    split.
    {
      apply A_FindNotEqual.Q_FindNotEqual_ResultNotEqual; auto with zarith.
      - now apply A_FindNotEqual.Q_FindNotEqual_Lower.
      - apply A_CountFindNotEqual.Q_CountNotEqual_FindNotEqual; auto with zarith.
    }
    {
      split.
      {
        assert(X: (0 + L_CountNotEqual_1_ L a 0 (0 + L_FindNotEqual_1_ L a 0 n v) v = 0)%Z).
        + rewrite A_CountFindNotEqual.Q_CountNotEqual_Zero; auto with zarith.
        + symmetry.
          rewrite <- A_CountNotEqual.Q_CountNotEqual_Union
            with (i_1:=(0 + L_FindNotEqual_1_ L a 0 n v)%Z); auto with zarith.
          * apply A_FindNotEqual.Q_FindNotEqual_Lower; auto with zarith.
          * apply A_FindNotEqual.Q_FindNotEqual_Upper; auto with zarith.
      }
      {
        apply A_CountFindNotEqual.Q_CountNotEqual_FindNotEqual; auto with zarith.
      }
    }
  }
  {
    intros z zNN IHz.
    intros.
    replace (Z.succ z) with (1+z)%Z in * by lia.
    assert(X: (z < L_CountNotEqual_1_ L a 0 n v)%Z) by lia.
    apply IHz in X; auto with zarith.
    destruct X as [A1 [A2 A3]].
    assert(B: (0 <= L_RemovePartition L a n v z)%Z).
    {
      apply Q_RemovePartition_Lower; auto with zarith.
      unfold L_CountNotEqual_2_; lia.
    }

    assert(C: (1 < L_CountNotEqual_1_ L a (L_RemovePartition L a n v z) n v)%Z) by lia.
    assert(D: (0 < L_CountNotEqual_1_ L a (1 + L_RemovePartition L a n v z) n v)%Z).
    {
      assert(Y: (L_CountNotEqual_1_ L a (L_RemovePartition L a n v z) n v =
                  L_CountNotEqual_1_ L a (L_RemovePartition L a n v z) (1+ L_RemovePartition L a n v z) v +
                  L_CountNotEqual_1_ L a (1+ L_RemovePartition L a n v z) n v)%Z).
      {
        rewrite <- A_CountNotEqual.Q_CountNotEqual_Union with 
          (i_1 := (1+ L_RemovePartition L a n v z)%Z); auto with zarith.
      }
      enough(0 <= L_CountNotEqual_1_ L a (L_RemovePartition L a n v z) (1 + L_RemovePartition L a n v z) v <= 1)%Z by lia.
      split.
      - apply A_CountNotEqual.Q_CountNotEqual_Lower; auto with zarith.
      - enough (L_RemovePartition L a n v z + 
                L_CountNotEqual_1_ L a (L_RemovePartition L a n v z) (1 + L_RemovePartition L a n v z) v <= 
                1 + L_RemovePartition L a n v z)%Z by lia.
        apply A_CountNotEqual.Q_CountNotEqual_Upper; auto with zarith.
    }

    split.
    {
      rewrite <- Q_RemovePartition_Next; auto with zarith.
      replace (1+z-1)%Z with z by lia.
      apply A_FindNotEqual.Q_FindNotEqual_ResultNotEqual; auto with zarith.
      - now apply A_FindNotEqual.Q_FindNotEqual_Lower.
      - apply A_CountFindNotEqual.Q_CountNotEqual_FindNotEqual; auto with zarith.
        assert(E: (L_RemovePartition L a n v z + L_CountNotEqual_1_ L a (L_RemovePartition L a n v z) n v <= n)%Z).
        + apply A_CountNotEqual.Q_CountNotEqual_Upper; auto with zarith.
        + lia.
    }
    {
      split.
      {
        remember (L_RemovePartition L a n v z) as x.
        symmetry.
        rewrite <- Q_RemovePartition_Next; auto with zarith.
        replace (1+z-1)%Z with z by lia.
        rewrite <- Heqx.
        symmetry in A2.

        remember (L_FindNotEqual_1_ L a (1 + x) n v) as y.

        assert(P: (L_CountNotEqual_1_ L a 0 n v = 
                  L_CountNotEqual_1_ L a 0 (1+x) v + 
                  L_CountNotEqual_1_ L a (1 + x + L_FindNotEqual_1_ L a (1 + x) n v) n v)%Z).
        {
          rewrite <- A_CountFindNotEqual.Q_CountNotEqual_Decrement with (i_1 := (1+x)%Z); auto with zarith.
          rewrite Heqx.
          assert(E: (L_RemovePartition L a n v z + L_CountNotEqual_1_ L a (L_RemovePartition L a n v z) n v <= n)%Z).
          * apply A_CountNotEqual.Q_CountNotEqual_Upper; auto with zarith.
          * subst x; lia.
        }

        rewrite <- Heqy in P.
        enough(L_CountNotEqual_1_ L a 0 (1 + x) v = 1 + z)%Z by lia.
        assert(Q: (L_CountNotEqual_1_ L a 0 n v = 
                   L_CountNotEqual_1_ L a 0 x v + L_CountNotEqual_1_ L a x n v)%Z) by
         (rewrite <- A_CountNotEqual.Q_CountNotEqual_Union with (i_1:=x); auto with zarith).

        assert(R: (L_CountNotEqual_1_ L a 0 x v = z)%Z) by lia.
        rewrite <- R.
        symmetry.
        assert(S: (L_CountNotEqual_1_ L a 0 (1 + x) v = 
                  L_CountNotEqual_1_ L a 0 x v + L_CountNotEqual_1_ L a x (1+x) v)%Z) by 
         (rewrite <- A_CountNotEqual.Q_CountNotEqual_Union with (i_1:=x); auto with zarith).
        enough (L_CountNotEqual_1_ L a x (1+x) v = 1)%Z by lia.
        rewrite <- A_CountNotEqual.Q_CountNotEqual_Hit; auto with zarith.
        rewrite A_CountNotEqual.Q_CountNotEqual_Empty; auto with zarith.
      }
      {
        rewrite <- Q_RemovePartition_Next; auto with zarith.
        replace (1+z-1)%Z with z by lia.
        apply A_CountFindNotEqual.Q_CountNotEqual_FindNotEqual; auto with zarith.
        assert(E: (L_RemovePartition L a n v z + L_CountNotEqual_1_ L a (L_RemovePartition L a n v z) n v <= n)%Z).
        - apply A_CountNotEqual.Q_CountNotEqual_Upper; auto with zarith.
        - lia.
      }
    }
  }
Qed.

Goal typed_external_lemma_RemovePartition_Lower.
Hint RemovePartition_Lower,property.
Proof.
  Require Import Psatz.
  intros v n p L a.
  intros nPos pNN pLT V.
  revert pLT.

  apply natlike_rec3 with (z:=p); auto with zarith.
  {
    intros.
    rewrite <- Q_RemovePartition_Next; auto with zarith.
    replace (0-1)%Z with (-1)%Z by lia.
    rewrite Q_RemovePartition_Left; auto with zarith.
    cbn.
    apply A_FindNotEqual.Q_FindNotEqual_Lower; auto with zarith.
  }
  {
    intros z zNN IHz.
    replace (Z.pred z) with (z-1)%Z in * by lia.
    intros.
    rewrite <- Q_RemovePartition_Next; auto with zarith.
    enough(0 <= L_FindNotEqual_1_ L a (1 + L_RemovePartition L a n v (z - 1)) n v)%Z by lia.
    apply A_FindNotEqual.Q_FindNotEqual_Lower; auto with zarith.
  }
Qed.

Goal typed_external_lemma_RemovePartition_Read.
Hint RemovePartition_Read,property.
Proof.
  Require Import Psatz.
  intros v n p K L a.
  intros V U.

  assert(A: (p < 0 \/ 0 <= p)%Z) by lia.
  destruct A.
  {
    rewrite Q_RemovePartition_Left; auto with zarith.
    rewrite Q_RemovePartition_Left; auto with zarith.
  }
  {
    assert(B: (n <= 0 \/ 0 < n)%Z) by lia.
    destruct B.
    rewrite Q_RemovePartition_Empty; auto with zarith.
    rewrite Q_RemovePartition_Empty; auto with zarith.

    assert(C: (p < L_CountNotEqual_1_ L a 0 n v  \/ L_CountNotEqual_1_ L a 0 n v <= p)%Z) by lia.
    destruct C.
    {
      assert ((p < L_CountNotEqual_1_ K a 0 n v)%Z).
      rewrite A_CountNotEqual.Q_CountNotEqual_Read with (t:=L); auto with zarith.
      revert H1.
      apply natlike_rec2 with (z:=p); auto with zarith.
      {
        intros.
        rewrite <- Q_RemovePartition_Next; auto with zarith.
        - rewrite Q_RemovePartition_Left; auto with zarith.
          rewrite <- Q_RemovePartition_Next; auto with zarith.
          rewrite Q_RemovePartition_Left; auto with zarith.
          replace (1 + -1)%Z with 0%Z by lia.
          rewrite A_FindNotEqual.Q_FindNotEqual_Read with (t:=L); auto with zarith.
        - unfold L_CountNotEqual_2_; lia.
      }
      {
        intros z zNN IHz.
        intros.
        replace (Z.succ z) with (1+z)%Z in * by lia.
        assert((1 + z < L_CountNotEqual_1_ K a 0 n v)%Z) by 
          (rewrite A_CountNotEqual.Q_CountNotEqual_Read with (t:=L); auto with zarith).

        rewrite <- Q_RemovePartition_Next; auto with zarith.
        symmetry.
        rewrite <- Q_RemovePartition_Next; auto with zarith.
        replace (1 + z - 1)%Z with z by lia.
        rewrite IHz; auto with zarith.
        replace (1 + z - 1)%Z with z by lia.
        enough( L_FindNotEqual_1_ L a (1 + L_RemovePartition L a n v z) n v =
                L_FindNotEqual_1_ K a (1 + L_RemovePartition L a n v z) n v)%Z by lia.
        rewrite <- A_FindNotEqual.Q_FindNotEqual_Read with (t_1:=K); auto with zarith.
        unfold P_Unchanged_1_.
        intros.
        rewrite U; auto with zarith.
        enough(0 <= L_RemovePartition L a n v z)%Z by lia.
        apply Q_RemovePartition_Lower; auto with zarith.
        unfold L_CountNotEqual_2_; lia.
      }
    }
    {
      rewrite Q_RemovePartition_Right; auto with zarith.
      - rewrite Q_RemovePartition_Right; auto with zarith.
      - unfold L_CountNotEqual_2_.
        rewrite A_CountNotEqual.Q_CountNotEqual_Read with (t:=L); auto with zarith.
    }
  }
Qed.

Goal typed_external_lemma_Remove_Skip.
Hint Remove_Skip,property.
Proof.
  Require Import Psatz.
  intros v m n L K a  am LV LK.
  intros mNN mLess V Rm.
  subst am.
  unfold P_Remove in *.
  intros i iNN iLess.
  unfold L_CountNotEqual_2_ in *.
  rewrite A_CountNotEqual.Q_CountNotEqual_Miss in iLess; auto with zarith.
  rewrite A_RemovePartition.Q_RemovePartition_Extend; auto with zarith.
  - assert ((m = 0 \/ 0 < m)%Z) by lia.
    destruct H; auto with zarith.
    rewrite A_CountNotEqual.Q_CountNotEqual_Empty in iLess; auto with zarith.
  - unfold L_CountNotEqual_2_. admit.
Qed.

Goal typed_external_lemma_Remove_Update.
Hint Remove_Update,property.
Proof.
  Require Import Psatz.
  intros v m L K a x.
  subst x.
  intros A B mNN V C.

  unfold P_Remove in *.
  unfold L_CountNotEqual_2_ in *.
  intros i iNN iLess.
  assert(D: (L_CountNotEqual_1_ K a 0 (1 + m) v = 1 + L_CountNotEqual_1_ K a 0 m v)%Z).
  rewrite A_CountNotEqual.Q_CountNotEqual_Hit; auto with zarith.
  rewrite D in iLess.
  assert(less_equal: (i < L_CountNotEqual_1_ K a 0 m v  \/  i = L_CountNotEqual_1_ K a 0 m v)%Z) by lia.
  destruct less_equal as [less|equal].
  {
    rewrite <- C; auto with zarith.
    rewrite A_RemovePartition.Q_RemovePartition_Extend; auto with zarith.
    (* show that m cannot be qual to 0 *)
    assert((m = 0 \/ 0 < m)%Z) by lia.
    destruct H; auto with zarith.
    rewrite A_CountNotEqual.Q_CountNotEqual_Empty in less; auto with zarith.
  }
  {
    replace (L_CountNotEqual_1_ K a 0 (1 + m) v - 1)%Z with (L_CountNotEqual_1_ K a 0 m v)%Z in B by lia.
    rewrite equal.
    rewrite B.
    auto with zarith.
    admit.
  }
Qed.

Goal typed_external_lemma_Reorder_LowerBound.
Hint Reorder_LowerBound,property.
Proof.
  intros n v L K a. intros.
  assert(n_cases: (0 < n \/ 0 = n \/ 0 > n)%Z) by apply Ztrichotomy.
  destruct n_cases as [pos | non_pos].
  -
    unfold P_LowerBound_2_.
    unfold P_LowerBound_1_.
    intros.
    assert (X: P_SomeEqual_2_ K a n (L .[ shift_sint32 a i])).
    + apply Q_Reorder_Match; auto with zarith.
    + unfold P_SomeEqual_2_ in X.
      unfold P_SomeEqual_1_ in X.
      destruct X as [k [A B]].
      rewrite <- A.
      now apply H2.
  -
    unfold P_LowerBound_2_.
    unfold P_LowerBound_1_.
    auto with zarith.
Qed.

Goal typed_external_lemma_Reorder_LowerBounds.
Hint Reorder_LowerBounds,property.
Proof.
  intros m n L K a.
  intros.

  cut (P_LowerBound_1_ K a m n (L .[ shift_sint32 a 0])).
  {
    unfold P_LowerBound_1_.
    intros.
    apply Z.ge_le.
    rewrite <- H1; auto with zarith.
    apply Z.le_ge.
    apply H4; auto with zarith.
  }

  enough (X: P_SomeEqual_1_ K a 0 m (L .[ shift_sint32 a 0])).
  + unfold P_SomeEqual_1_ in X.
    destruct X as [k [A B]].
    rewrite <- A.
    apply H3; auto with zarith.
  + apply Q_Reorder_Match; auto with zarith.
Qed.

Goal typed_external_lemma_Reorder_Match.
Hint Reorder_Match,property.
Proof.
  intros n i L K a.
  intros nPos Lower Upper Reorder.

  unfold P_SomeEqual_2_.
  unfold P_MultisetUnchanged_2_ in Reorder.
  unfold P_MultisetUnchanged_1_ in Reorder.


  (* work around for https://bts.frama-c.com/view.php?id=2332 *)
  assert(CType: Cint.is_sint32 (L .[ shift_sint32 a i])) by admit.

  apply A_CountFind.Q_Count_SomeEqual; auto with zarith.
  rewrite Reorder; auto with zarith.
  rewrite <- A_Count.Q_Count_Union with (i_1:=i); auto with zarith.
  assert(X: (0 <= A_Count.L_Count_1_ L a 0 i (L .[ shift_sint32 a i]))) by 
    (apply A_Count.Q_Count_Bounds; auto with zarith).

  enough(0 < A_Count.L_Count_1_ L a i n (L .[ shift_sint32 a i])) by auto with zarith.
  rewrite <- A_Count.Q_Count_Union with (i_1:=(1+i)%Z); auto with zarith.

  assert(Y:(0 <= A_Count.L_Count_1_ L a (1 + i) n (L .[ shift_sint32 a i])))by 
    (apply A_Count.Q_Count_Bounds; auto with zarith).

  enough (0 < A_Count.L_Count_1_ L a i (1 + i) (L .[ shift_sint32 a i])) by auto with zarith.
  rewrite <- A_Count.Q_Count_Hit; auto with zarith.
  - replace (1+i-1) with i by auto with zarith.
    rewrite A_Count.Q_Count_Empty; auto with zarith.
  - replace (1+i-1) with i by auto with zarith.
    trivial.
Admitted.

Goal typed_external_lemma_Reorder_UpperBound.
Hint Reorder_UpperBound,property.
Proof.
  intros n v L K a. intros.
  assert(n_cases: (0 < n \/ 0 = n \/ 0 > n)%Z) by apply Ztrichotomy.
  destruct n_cases as [pos | non_pos].
  -
    unfold P_UpperBound_2_.
    unfold P_UpperBound_1_.
    intros.
    assert (X: P_SomeEqual_2_ K a n (L .[ shift_sint32 a i])).
    + apply Q_Reorder_Match; auto with zarith.
    + unfold P_SomeEqual_2_ in X.
      unfold P_SomeEqual_1_ in X.
      destruct X as [k [A B]].
      rewrite <- A.
      now apply H2.
  -
    unfold P_UpperBound_2_.
    unfold P_UpperBound_1_.
    auto with zarith.
Qed.

Goal typed_external_lemma_SomeEqual_Count.
Hint SomeEqual_Count,property.
Proof.
  Require Import Psatz.
  intros v m n L a.
  intros mNN Less V Some.
  unfold P_SomeEqual_1_ in *.
  destruct Some as [k [A B]].

  assert(C: (1 = L_Count_1_ L a k (1+k) v)%Z).
  {
    rewrite <- A_Count.Q_Count_Hit; auto with zarith.
    - rewrite A_Count.Q_Count_Empty; auto with zarith.
    - now replace (1+k-1)%Z with k by lia.
  }

  rewrite <- A_Count.Q_Count_Union with (i_1:=(1+k)%Z); auto with zarith.
  rewrite <- A_Count.Q_Count_One; auto with zarith.
  enough(0 <= L_Count_1_ L a (1 + k) n v /\ 0 <= L_Count_1_ L a m k v)%Z by lia.
  split; (apply A_Count.Q_Count_Bounds; auto with zarith).
Qed.

Goal typed_external_lemma_StrictLowerBoundShift.
Hint StrictLowerBoundShift,property.
Proof.
  Require Import Psatz.
  unfold P_StrictLowerBound_1_ in *.
  unfold shift_sint32 in *.
  intros.
  replace i0 with (i_2 + (i0 - i_2))%Z by lia.

  rewrite <- shift_associative.
  apply H0; lia.

Qed.

Goal typed_external_lemma_StrictUpperBoundShift.
Hint StrictUpperBoundShift,property.
Proof.
  Require Import Psatz.
  unfold P_StrictUpperBound_1_ in *.
  unfold shift_sint32 in *.
  intros.
  replace i0 with (i_1 + (i0 - i_1))%Z by lia.

  rewrite <- shift_associative.
  apply H0; lia.

Qed.

Goal typed_external_lemma_SwappedInsideReorder.
Hint SwappedInsideReorder,property.
Proof.
  Require Import Psatz.
  intros i k n L K a.
  intros.
  unfold P_SwappedInside in H.
  destruct H as [A1 [A2 [A3 [A4 [A5 [A6 [A7 A8]]]]]]].

  unfold P_MultisetUnchanged_1_.
  intros v. intros.
  rewrite <- Q_CountSectionOne; auto with zarith.
  symmetry.
  rewrite <- Q_CountSectionOne; auto with zarith.
  rewrite <- Q_CountSectionUnion with (i_1 := 1+i); auto with zarith.
  symmetry.
  rewrite <- Q_CountSectionUnion with (i_1 := 1+i); auto with zarith.

  enough (Center: L_Count_1_ L a (1 + i) k v = L_Count_1_ K a (1 + i) k v).
  - rewrite Center.
    enough (Left: L_Count_1_ L a i (1 + i) v = L_Count_1_ K a k (1 + k) v).
    rewrite Left.
    enough (Right: L_Count_1_ L a k (1 + k) v = L_Count_1_ K a i (1 + i) v).
    rewrite Right.
    auto with zarith.
    + rewrite <- Q_EqualRangesCount with (i := i) (t_1 := K); auto with zarith.
      replace (i + (1 + k) - k) with (1 + i) by lia.
      trivial.
      unfold P_EqualRanges_4_.
      unfold P_EqualRanges_3_.
      replace (1 + k - k) with 1 by lia.
      unfold P_EqualRanges_1_.
      intros.
      rewrite shift_associative.
      rewrite shift_associative.
      replace (k + i0) with k by lia.
      replace (i + i0) with i by lia.
      auto with zarith.
    + rewrite <- Q_EqualRangesCount with (i := k) (t_1 := K); auto with zarith.
      replace (k + (1 + i) - i) with (1  + k) by lia.
      trivial.
      unfold P_EqualRanges_4_.
      unfold P_EqualRanges_3_.
      replace (1 + i - i) with (1) by lia.
      unfold P_EqualRanges_1_.
      intros.
      rewrite shift_associative.
      rewrite shift_associative.
      replace (k + i0) with k by lia.
      replace (i + i0) with i by lia.
      auto with zarith.
  - rewrite A_Count.Q_CountSectionRead with (t := K); auto with zarith.
Qed.

Goal typed_external_lemma_Unchanged_Shift.
Hint Unchanged_Shift,property.
Proof.
  intros p q r K L.
  intros.
  unfold P_Unchanged_1_ in *.
  unfold shift_sint32 in *.
  intros.

  remember (i - p) as k.
  replace i with (p + k) by auto with zarith.
  replace (shift a (p + k)) with (shift (shift a p) k).
  - apply H; auto with zarith.
  - now rewrite shift_associative.
Qed.

Goal typed_external_lemma_UniquePartitionLowerBound.
Hint UniquePartitionLowerBound,property.
Proof.
  Require Import Psatz.
  intros n i L a.
  intros.
  assert (B: 0 < i \/ 0 = i) by (apply Zle_lt_or_eq; auto).
  destruct B as [pos|zero].
  - replace 0 with (L_UniquePartition L a n 0).
    enough(L_UniquePartition L a n 0 < L_UniquePartition L a n i); auto with zarith.
    apply A_UniquePartition.Q_UniquePartitionMonotone; lia.
    rewrite Q_UniquePartitionZero; lia.
  - rewrite <- zero.
    rewrite Q_UniquePartitionZero; lia.
Qed.

Goal typed_external_lemma_UniquePartitionUpperBound.
Hint UniquePartitionUpperBound,property.
Proof.
  Require Import Psatz.
  intros n i L a.
  intros.
  assert(X: L_UniquePartition L a n i < L_UniquePartition L a n (L_UniqueSize L a n)).
  - apply Q_UniquePartitionMonotone; lia.
  - assert(Y:  n = (L_UniquePartition L a n (L_UniqueSize L a n))).
    rewrite Q_UniquePartitionRight; auto with zarith.
    now rewrite <- Y in X.
Qed.

Goal typed_external_lemma_UniquePreserve.
Hint UniquePreserve,property.
Proof.
  intros i n.
  intros L K a b.
  intros. subst x.
  unfold P_Unique. intros j. intros.

  rewrite <- H2; auto with zarith.
  - rewrite <- H4; auto with zarith.
    rewrite <- H3; auto with zarith.
    + replace (L_UniquePartition L a i j) with (L_UniquePartition K a i j); auto.
      rewrite <- A_UniquePartition.Q_UniquePartitionRead with (t_1:=L); auto.
      apply A_UnchangedLemmas.Q_Unchanged_Shrink with (i_3:=0) (i_2:=n); auto with zarith.
    + rewrite <- A_UniqueSize.Q_UniqueSizeRead with (t_1 := L); auto with zarith.
      apply A_UnchangedLemmas.Q_Unchanged_Shrink with (i_3:=0) (i_2:=n); auto with zarith.
  - apply A_UniquePartition.Q_UniquePartitionLowerBound; auto with zarith.
  - enough (L_UniquePartition L a i j < i); auto with zarith.
    apply A_UniquePartition.Q_UniquePartitionUpperBound; auto with zarith.
Qed.

Goal typed_external_lemma_UniqueSizeBound.
Hint UniqueSizeBound,property.
Proof.
  intros n L a.
  intros X.
  subst X.
  generalize n as m.
  intros.

  apply natlike_rec2 with (z := m); auto with zarith.
  - rewrite Q_UniqueSizeEmpty; auto with zarith.
  - intros.
    Require Import Psatz.
    replace (Z.succ z) with (1+z) in * by lia.
    assert (B: 0 < z \/ 0 = z) by (apply Zle_lt_or_eq; auto).
    destruct B as [pos|zero].
    + assert (C: L.[ shift a z] = L.[ shift a (z-1)] \/ L.[ shift a z] <> L.[ shift a (z-1)]) by tauto.
      destruct C as [eq|neq].
      ++ rewrite Q_UniqueSizeEqual; auto with zarith.
      ++ rewrite <- Q_UniqueSizeDiffer; auto with zarith.
    + rewrite <- zero.
      replace (1+0) with 1 by lia.
      rewrite Q_UniqueSizeOne; lia.
Qed.

Goal typed_external_lemma_UniqueSizeRead.
Hint UniqueSizeRead,property.
Proof.
  Require Import Psatz.
  intros n K L a.
  assert (X: n <= 0 \/ n = 1 \/ n > 1) by lia.
  destruct X as [lez|gtz].
  {
    intro.
    assert (L_UniqueSize K a n = 0) by (now apply FixL_UniqueSize).
    assert (L_UniqueSize L a n = 0) by (now apply FixL_UniqueSize).
    lia.
  }
  {
    destruct gtz as [eqo|gto].
    {
      intro.
      assert (L_UniqueSize K a n = 1) by (apply FixL_UniqueSize; lia).
      assert (L_UniqueSize L a n = 1) by (apply FixL_UniqueSize; lia).
      lia.
    }
    {
      apply Zlt_lower_bound_ind with (z := 1) (x := n); auto with zarith.
      intros.
      assert (x = 1 \/ x > 1) by lia.
      destruct H2.
      {
        assert (L_UniqueSize K a x = 1) by (apply FixL_UniqueSize; lia).
        assert (L_UniqueSize L a x = 1) by (apply FixL_UniqueSize; lia).
        lia.
      }
      assert (P_Unchanged_2_ K L a (x-1) -> L_UniqueSize K a (x-1) = L_UniqueSize L a (x-1)) by (apply H; lia).
      clear H.
      unfold P_Unchanged_2_ in H1.
      assert (L.[shift_sint32 a (x-1)] = K.[shift_sint32 a (x-1)]) by (apply H1; lia).
      assert (L.[shift_sint32 a (x-2)] = K.[shift_sint32 a (x-2)]) by (apply H1; lia).

      pose (v := (if ((Zeq_bool (K.[shift_sint32 a (x-1)]) (K.[shift_sint32 a (x - 2)]))) then 0 else 1)).
      assert (L_UniqueSize K a (x-1) + v = L_UniqueSize K a x) by (apply FixL_UniqueSize; lia).

      pose (w := (if ((Zeq_bool (L.[shift_sint32 a (x-1)]) (L.[shift_sint32 a (x - 2)]))) then 0 else 1)).
      assert (L_UniqueSize L a (x-1) + w = L_UniqueSize L a x) by (apply FixL_UniqueSize; lia).

      assert (v = w).
      {
        subst v w.
        rewrite H.
        now rewrite H4.
      }
      rewrite <- H5.
      rewrite <- H6.
      rewrite H7.
      enough (L_UniqueSize K a (x - 1) = L_UniqueSize L a (x - 1)) by lia.
      apply H3.
      apply A_UnchangedLemmas.Q_Unchanged_Shrink with (i_3:=0%Z) (i_2:=x); auto with zarith.
    }
  }
Qed.

Goal typed_external_lemma_UpperBoundShift.
Hint UpperBoundShift,property.
Proof.
  Require Import Psatz.
  unfold P_UpperBound_1_ in *.
  unfold shift_sint32 in *.
  intros.
  replace i0 with (i_1 + (i0 - i_1))%Z by lia.

  rewrite <- shift_associative.
  apply H0; lia.

Qed.

Goal typed_external_lemma_WeaklyIncreasingImpliesIncreasing.
Hint WeaklyIncreasingImpliesIncreasing,property.
Proof.
  Require Import Psatz.
  intros m n L a M MN.
  replace n with (m + (n-m)) in * by lia.

  apply natlike_rec2 with (z := (n - m)); auto with zarith.
  {
    intros.
    rewrite Zplus_0_r in *.
    unfold P_Increasing_1_.
    intros i j.
    intros.
    auto with zarith. (* empty domain *)
  }
  {
    intros.
    rename H0 into IndStep.
    rename H1 into IndHyp.

    replace (Z.succ z) with (1 + z) in * by auto with zarith.
    unfold P_Increasing_1_.
    intros i j.
    intros.

    assert(X: j < m + z \/ j >= m + z) by tauto.
    destruct X as [le|geq].
    {
      apply IndStep; auto with zarith.
      unfold P_WeaklyIncreasing_1_.
      intros k. intros.
      apply IndHyp; auto with zarith.
    }
    {
      assert (eq: j = m + z) by auto with zarith.
      rewrite <- eq in *.
      assert(XX: i < j - 1 \/ i >= j - 1) by tauto.
      destruct XX as [le1|geq1].
      {
        assert(Y: L .[ shift_sint32 a (j-1)] <= L .[ shift_sint32 a j]).
        {
          replace j with (1 + (j-1)) by auto with zarith.
          replace ((1 + (j - 1) - 1)) with (j-1) by auto with zarith.
          unfold P_WeaklyIncreasing_1_ in IndHyp.
          apply IndHyp; auto with zarith.
        }
        assert(Z: L.[ shift_sint32 a i] <= L .[ shift_sint32 a (j-1)]).
        {
          apply IndStep; auto with zarith.
          unfold P_WeaklyIncreasing_1_.
          intros k. intros.
          apply IndHyp; auto with zarith.
        }
        auto with zarith.
      }
      {
        assert(EQ: i = j - 1) by auto with zarith.
        replace j with (1 + (j - 1)) by auto with zarith.
        rewrite EQ.
        apply IndHyp; auto with zarith.
      }
    }
  }
Qed.

Goal typed_external_lemma_WeaklyIncreasingShift.
Hint WeaklyIncreasingShift,property.
Proof.
Require Import Psatz.
intros n m L a.
unfold P_WeaklyIncreasing_1_.
unfold shift_sint32.
split.
+ intros H i LB UB.
  remember (i - n) as k.
  assert (LBZ: 0 <= k) by lia.
  assert (UBZ: 2 + k <= m) by lia.
  replace i with (n + k) by lia.
  rewrite <- shift_associative.
  replace (1 + (n + k)) with (n + (1 + k)) by lia.
  rewrite <- shift_associative.
  apply H; assumption.
+ intros H i LB UB.
  remember (i + n) as k.
  rewrite shift_associative.
  rewrite shift_associative.
  replace (n + (1 + i)) with (1 + (n + i)) by lia.
  apply H with (i := n + i); auto with zarith.
Qed.

Goal typed_external_remove_copy3_assert_remove_3.
Hint property,remove,remove_copy3.
Proof.
(* auto with zarith. *)
Qed.

Goal typed_external_remove_copy3_loop_invariant_remove_preserved.
Hint preserved,remove,remove_copy3.
Proof.
(* auto with zarith. *)
Qed.

Goal typed_external_search_n_no_match_ensures_result_part1.
Hint no_match,part-0,property,result,search_n.
Proof.
  intros.
  subst x x_1 x_2 x_3.
  assert(i < i_2)%Z by  auto with zarith.
  assert(i <> i_2)%Z by auto with zarith.
Qed.


