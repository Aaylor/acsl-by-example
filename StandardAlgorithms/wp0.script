(* Generated by Frama-C WP *)

Goal typed_ref_external_lemma_AdjacentDifferenceInverse.
Hint AdjacentDifferenceInverse,property.
Proof.
  intros n L K A B H.

  apply natlike_rec2 with (z := n); auto with zarith.
  {
    intros.
    unfold P_Unchanged_2_ in *.
    unfold P_Unchanged_1_ in *.
    intros.
    intuition.
  }
  {
    intros.
    Require Import Psatz.
    replace (Z.succ z) with (1+z) in * by lia.

    assert(X: P_Unchanged_2_ L K A z). {
      apply H1; auto with zarith.
      - apply Q_UnchangedSection with (i := 1+z); auto with zarith.
      - apply Q_PartialSumSection with (i := 1+z); auto with zarith.
      - apply Q_AdjacentDifferenceSection with (i := 1+z); auto with zarith.
    } 

    unfold P_Unchanged_2_.
    unfold P_Unchanged_1_.
    intros.

    assert(Y: i < z \/ i = z) by lia.
    destruct Y as [less|equal].
    {
      apply X; auto with zarith.
    }
    {
      rewrite equal.
      rewrite H3; auto with zarith.
      rewrite Q_AccumulateDefaultNext; auto with zarith.
      rewrite H2; auto with zarith.
      rewrite <- H4; auto with zarith.

      assert (Z: z = 0 \/ z > 0) by lia.
      destruct Z as [zero|pos].
      {
        rewrite zero.
        rewrite Q_DifferenceEmptyOrSingle; auto with zarith.
        rewrite <- Q_AccumulateDefault0; lia.
      }
      {
        rewrite Q_DifferenceNext; auto with zarith.
        cut ((K .[ shift_sint32 A (z - 1)]) = L_Accumulate_2_ L B z).
        - lia.
        - rewrite <- X; auto with zarith.
          rewrite H3; auto with zarith.
          replace (1 + (z-1)) with z by lia.
          trivial.
      }
    }
  }




Qed.

Goal typed_ref_external_lemma_CountBounds.
Hint CountBounds,property.
Proof.
  Require Import Psatz.
  intros v n M a.
  intros.
  subst x.
  apply natlike_rec2 with (z := n); auto with zarith.
  {
    (* base step *)
    rewrite <- Q_CountEmpty; auto with zarith.
  }
  {
    (* induction step *)
    intros.
    replace (Z.succ z) with (1 + z) by lia.
    assert (X: M.[ shift a z] = v \/ M.[ shift a z] <> v) by tauto.

    elim X; intros.
    - rewrite Q_CountOneHit; auto with zarith.
    - rewrite <- Q_CountOneMiss; auto with zarith.
  }




Qed.

Goal typed_ref_external_lemma_CountSectionBounds.
Hint CountSectionBounds,property.
Proof.
  Require Import Psatz.
  intros.
  subst x.
  remember i_1 as m.
  remember i   as n.
  remember i_2 as v.
 
  replace n with (m + (n-m)) by lia.
  apply natlike_rec2 with (z := (n - m)); auto with zarith.
  {
    rewrite Zplus_0_r.
    rewrite <- Q_CountSectionEmpty; auto with zarith.
  }
  {
    intros.
    replace (m + Z.succ z) with (1 + (m+z)) by lia.

    assert (X: t.[ shift a (m+z)] =  v \/
               t.[ shift a (m+z)] <> v) by lia.
    destruct X as [eq|neq]. 
    - rewrite Q_CountSectionHit; auto with zarith.
    - rewrite <- Q_CountSectionMiss; auto with zarith.
  }

Qed.

Goal typed_ref_external_lemma_CountSectionMonotonic.
Hint CountSectionMonotonic,property.
Proof.
  Require Import Psatz.
  intros.
  remember i_3 as v.
  remember i_2 as m.
  remember i   as p.
  remember i_1 as n.

  replace p with (n + (p-n)) by lia.
  apply natlike_rec2 with (z := (p - n)); auto with zarith.
  {
    replace (n+0) with n by lia.
    lia.
  }
  {
    intros.
    replace (n + Z.succ z) with (1 + (n+z)) by lia.

    assert (X: t.[ shift a (n+z)] =  v \/
               t.[ shift a (n+z)] <> v) by lia.
    destruct X as [eq|neq].
    - rewrite Q_CountSectionHit; auto with zarith.
    - rewrite <- Q_CountSectionMiss; auto with zarith.

  }




Qed.

Goal typed_ref_external_lemma_CountSectionUnion.
Hint CountSectionUnion,property.
Proof.
  Require Import Psatz.
  intros.
  remember i_2 as v.
  remember i   as n.
  remember i_1 as m.

  replace n with (m + (n-m)) by lia.
  apply natlike_rec2 with (z := (n - m)); auto with zarith.
  {
    rewrite Zplus_0_r.
    replace (L_CountSection t a m m v) with 0 by (rewrite <- Q_CountSectionEmpty; auto with zarith).
    lia.
  }
  {
    intros.
    replace (m + Z.succ z) with (1 + (m+z)) by lia.

    assert (X: t.[ shift a (m+z)] =  v \/ t.[ shift a (m+z)] <> v) by lia.
    destruct X as [eq|neq].
    {
      rewrite Q_CountSectionHit; auto with zarith.
      rewrite H3; auto with zarith.
      symmetry.
      rewrite Q_CountSectionHit; auto with zarith.
    }
    {
      rewrite <- Q_CountSectionMiss; auto with zarith.
      symmetry.
      rewrite <- Q_CountSectionMiss; auto with zarith.
    }
  }




Qed.

Goal typed_ref_external_lemma_HeapMaximum.
Hint HeapMaximum,property.
Proof.
  Require Import Psatz.
  intros.

  (* for me it somehow easier to first proof this slight reformulation and apply it later *)
  assert(Reformulate: 
           forall (i : int) (s : farray addr int) (b : addr),
           let x := 1 + i in 0 <= i -> P_IsHeap s b x -> P_MaxElement s b x 0).
  {
    intros n s b.
    intros x A.
    subst x.
    apply natlike_rec2 with (z := n); auto with zarith.
    {
      rewrite Zplus_0_r.
      intros.
      unfold P_MaxElement.
      split; auto with zarith.
      split; auto with zarith.
      unfold P_UpperBound.
      intros.
      replace i0 with 0 by lia.
      lia.
    }
    {
      intros z.
      intros.
      replace (Z.succ z) with (1+z) in * by lia.

       assert(X: P_IsHeap s b (1+z)).
       {
         unfold P_IsHeap.
         intros.
         apply H3; auto with zarith.
       }
       assert(Y: P_MaxElement s b (1+z) 0).
       {
        apply H2; auto with zarith.
       }
       unfold P_MaxElement.
       unfold P_UpperBound.
       split; auto with zarith.
       split; auto with zarith.
       intros.

       assert(less_equal: i0 < 1+z \/ i0 = 1+z) by lia.
       destruct less_equal as [less|equal].
       {
         apply Y; auto with zarith.
       }
       {
         rewrite equal.
         assert(Z: s .[ shift_sint32 b (1+z)] <= s .[ shift_sint32 b (L_HeapParent (1+z))]).
         {
           apply H3; auto with zarith.
         }
         assert(ZZ: s .[ shift_sint32 b (L_HeapParent (1+z))] <= s .[ shift_sint32 b 0]).
         {
           unfold L_HeapParent.
           replace (1+z-1) with z by lia.
           apply Y; auto with zarith.
           cut (Cdiv z 2 <= z); auto with zarith.
           apply Q_HeapBounds; lia.
           apply Q_HeapBounds; lia.
         }
         lia.
       }
     }
  }

  replace i with (1+(i-1)) by lia.
  apply Reformulate; auto with zarith.
  replace (1+(i-1)) with i by lia.
  trivial.




Qed.

Goal typed_ref_external_lemma_LowerBoundShift.
Hint LowerBoundShift,property.
Proof.
  Require Import Psatz.
  unfold P_LowerBound.
  intros val b c d L a H0 LowerBound i X Y.
  replace i with (b + (i - b)); auto with zarith.
  rewrite <- shift_associative.
  apply LowerBound; lia.




Qed.

Goal typed_ref_external_lemma_MultisetUnchangedUnion.
Hint MultisetUnchangedUnion,property.
Proof.
  unfold P_MultisetUnchanged_1_ in *.
  intros.
  remember i0 as v.
  remember i as n.
  remember i_1 as k.

  rewrite Q_CountSectionUnion with (i_1 := k); auto with zarith.
  symmetry.
  rewrite Q_CountSectionUnion with (i_1 := k); auto with zarith.
  rewrite H1; auto with zarith.
  rewrite H2; auto with zarith.

Qed.

Goal typed_ref_external_lemma_RemoveCountMonotonic.
Hint RemoveCountMonotonic,property.
Proof.
  Require Import Psatz.
  unfold L_RemoveCount in *.
  intros v m n M a.
  intros.

  cut(m + (L_Count M a n v) <= n + (L_Count M a m v)); auto with zarith.
  rewrite Q_CountUnion with (i_1 := m); auto with zarith.
  unfold L_Count.
  cut (m + L_CountSection M a m n v <= n); auto with zarith.
  apply Q_CountSectionBounds; auto with zarith.




Qed.

Goal typed_ref_external_lemma_RetainAllButOneMiss.
Hint RetainAllButOneMiss,property.
Proof.
  Require Import Psatz.
  intros.

  remember a_1 as A.
  remember a   as B.
  remember i_2 as v.
  remember i_1 as m.
  remember i   as n.
  remember t   as K.
  remember t_1 as L.

  subst x a_2.
  unfold P_RetainAllButOne in *.
  intros x. intros.

  assert(X: x =  L .[ shift_sint32 A m] \/ x <> L .[ shift_sint32 A m]) by lia.

  destruct X as [eq|neq].
  {
    rewrite Q_CountOneHit; auto with zarith.
    rewrite <- Q_CountRead with (t := K); auto with zarith.
    - symmetry.
      rewrite Q_CountOneHit; auto with zarith.
      rewrite <- Q_CountRead with (t := K); auto with zarith.
      rewrite <- H5; auto with zarith.
    - apply Q_UnchangedSection with (i := 1+m); auto with zarith.
  }
  {
    rewrite <- Q_CountOneMiss; auto with zarith.
    rewrite <- Q_CountRead with (t := K); auto with zarith.
    - symmetry.
      rewrite <- Q_CountOneMiss; auto with zarith.
      rewrite <- Q_CountRead with (t := K); auto with zarith.
      rewrite H5; auto with zarith.
    - apply Q_UnchangedSection with (i := 1+m); auto with zarith.
  }




Qed.

Goal typed_ref_external_lemma_SortedShift.
Hint SortedShift,property.
Proof.
  Require Import Psatz.
  unfold P_Sorted_2_.
  unfold P_Sorted_1_ in *.
  unfold shift_sint32 in *.
  intros l r L a.
  intros.

  rewrite shift_associative.
  rewrite shift_associative.
  apply H1; lia.




Qed.

Goal typed_ref_external_lemma_StrictLowerBoundShift.
Hint StrictLowerBoundShift,property.
Proof.
  Require Import Psatz.
  unfold P_StrictLowerBound in *.
  unfold shift_sint32 in *.
  intros.
  replace i0 with (i_2 + (i0 - i_2)) by lia.
  rewrite <- shift_associative.
  apply H0; lia.




Qed.

Goal typed_ref_external_lemma_StrictUpperBoundShift.
Hint StrictUpperBoundShift,property.
Proof.
  Require Import Psatz.
  unfold P_StrictUpperBound in *.
  unfold shift_sint32 in *.
  intros.
  replace i0 with (i_1 + (i0 - i_1)) by lia.
  rewrite <- shift_associative.
  apply H0; lia.




Qed.

Goal typed_ref_external_lemma_UpperBoundShift.
Hint UpperBoundShift,property.
Proof.
  Require Import Psatz.
  unfold P_UpperBound in *.
  unfold shift_sint32 in *.
  intros.
  replace i0 with (i_1 + (i0 - i_1)) by lia.
  rewrite <- shift_associative.
  apply H0; auto with zarith.




Qed.

Goal typed_ref_external_sort_heap_assert_max_2.
Hint max,property,sort_heap.
Proof.
(* auto with zarith. *)




Qed.
