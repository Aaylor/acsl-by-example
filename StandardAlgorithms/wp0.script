(* Generated by Frama-C WP *)

Goal typed_ref_external_lemma_AdjacentDifferenceInverse.
Hint AdjacentDifferenceInverse,property.
Proof.
  intros n L K A B H.

  apply natlike_rec2 with (z := n); auto with zarith.
  {
    intros.
    unfold P_Unchanged_2_ in *.
    unfold P_Unchanged_1_ in *.
    intros.
    intuition.
  }
  {
    intros.
    Require Import Psatz.
    replace (Z.succ z) with (1+z) in * by lia.

    assert(X: P_Unchanged_2_ L K A z). {
      apply H1; auto with zarith.
      - apply Q_UnchangedSection with (i := 1+z); auto with zarith.
      - apply Q_PartialSumSection with (i := 1+z); auto with zarith.
      - apply Q_AdjacentDifferenceSection with (i := 1+z); auto with zarith.
    } 

    unfold P_Unchanged_2_.
    unfold P_Unchanged_1_.
    intros.

    assert(Y: i < z \/ i = z) by lia.
    destruct Y as [less|equal].
    {
      apply X; auto with zarith.
    }
    {
      rewrite equal.
      rewrite H3; auto with zarith.
      rewrite Q_AccumulateDefaultNext; auto with zarith.
      rewrite H2; auto with zarith.
      rewrite <- H4; auto with zarith.

      assert (Z: z = 0 \/ z > 0) by lia.
      destruct Z as [zero|pos].
      {
        rewrite zero.
        rewrite Q_DifferenceEmptyOrSingle; auto with zarith.
        rewrite <- Q_AccumulateDefault0; lia.
      }
      {
        rewrite Q_DifferenceNext; auto with zarith.
        cut ((K .[ shift_sint32 A (z - 1)]) = L_Accumulate_2_ L B z).
        - lia.
        - rewrite <- X; auto with zarith.
          rewrite H3; auto with zarith.
          replace (1 + (z-1)) with z by lia.
          trivial.
      }
    }
  }

Qed.

Goal typed_ref_external_lemma_CountBounds.
Hint CountBounds,property.
Proof.
  Require Import Psatz.
  intros v n M a.
  intros.
  subst x.
  apply natlike_rec2 with (z := n); auto with zarith.
  {
    (* base step *)
    rewrite <- Q_CountEmpty; auto with zarith.
  }
  {
    (* induction step *)
    intros.
    replace (Z.succ z) with (1 + z) by lia.
    assert (X: M.[ shift a z] = v \/ M.[ shift a z] <> v) by tauto.

    elim X; intros.
    - rewrite Q_CountHit; auto with zarith.
    - rewrite <- Q_CountMiss; auto with zarith.
  }

Qed.

Goal typed_ref_external_lemma_CountOne.
Hint CountOne,property.
Proof.
(* auto with zarith. *)

Qed.

Goal typed_ref_external_lemma_CountSectionBounds.
Hint CountSectionBounds,property.
Proof.
  Require Import Psatz.
  intros.
  subst x.
  remember i_1 as m.
  remember i   as n.
  remember i_2 as v.
 
  replace n with (m + (n-m)) by lia.
  apply natlike_rec2 with (z := (n - m)); auto with zarith.
  {
    rewrite Zplus_0_r.
    rewrite A_Count.Q_CountSectionEmpty; auto with zarith.
  }
  {
    intros.
    replace (m + Z.succ z) with (1 + (m+z)) by lia.

    assert (X: t.[ shift a (m+z)] =  v \/
               t.[ shift a (m+z)] <> v) by lia.
    destruct X as [eq|neq]. 
    - rewrite <- A_Count.Q_CountSectionHit; auto with zarith.
      + replace (1 + (m + z) - 1) with (m + z) by lia.
        auto with zarith.
      + replace (1 + (m + z) - 1) with (m + z) by lia.
        auto with zarith.
    - rewrite <- A_Count.Q_CountSectionMiss; auto with zarith.
      + replace (1 + (m + z) - 1) with (m + z) by lia.
        auto with zarith.
      + replace (1 + (m + z) - 1) with (m + z) by lia.
        auto with zarith.
  }
Qed.

Goal typed_ref_external_lemma_CountSectionMonotonic.
Hint CountSectionMonotonic,property.
Proof.
  Require Import Psatz.
  intros.
  remember i_3 as v.
  remember i_2 as m.
  remember i   as p.
  remember i_1 as n.

  replace p with (n + (p-n)) by lia.
  apply natlike_rec2 with (z := (p - n)); auto with zarith.
  {
    replace (n+0) with n by lia.
    lia.
  }
  {
    intros.
    replace (n + Z.succ z) with (1 + (n+z)) by lia.

    assert (X: t.[ shift a (n+z)] =  v \/
               t.[ shift a (n+z)] <> v) by lia.
    destruct X as [eq|neq].
    - apply  Z.ge_le.
      rewrite <- A_Count.Q_CountSectionHit; auto with zarith.
      + replace (1 + (n + z) - 1) with (n + z) by lia.
        auto with zarith.
      + replace (1 + (n + z) - 1) with (n + z) by lia.
        auto.
    - apply  Z.ge_le.
      rewrite <- A_Count.Q_CountSectionMiss; auto with zarith.
      + replace (1 + (n + z) - 1) with (n + z) by lia.
        auto with zarith.
      + replace (1 + (n + z) - 1) with (n + z) by lia.
        auto.
  }
Qed.

Goal typed_ref_external_lemma_CountSectionUnion.
Hint CountSectionUnion,property.
Proof.
  Require Import Psatz.
  intros v k m n L a.
  intros.

  replace n with (m + (n-m)) by lia.
  apply natlike_rec2 with (z := (n - m)); auto with zarith.
  {
    rewrite Zplus_0_r.
    rewrite A_Count.Q_CountSectionEmpty; auto with zarith.
  }
  {
    intros.
    replace (m + Z.succ z) with (1 + (m+z)) by lia.

    assert (X: L.[ shift a (m+z)] =  v \/ L.[ shift a (m+z)] <> v) by tauto.
    destruct X as [eq|neq].
    {
      symmetry.
      rewrite <- A_Count.Q_CountSectionHit; auto with zarith.
      replace (1 + (m + z) - 1) with (m + z) by lia.
      symmetry.
      rewrite <- A_Count.Q_CountSectionHit; auto with zarith.
      replace (1 + (m + z) - 1) with (m + z) by lia.
      auto with zarith.
      - replace (1 + (m + z) - 1) with (m + z) by lia.
        auto.
      - replace (1 + (m + z) - 1) with (m + z) by lia.
        auto.
    }
    {
      rewrite <- A_Count.Q_CountSectionMiss; auto with zarith.
      replace (1 + (m + z) - 1) with (m + z) by lia.
      symmetry.
      rewrite <- A_Count.Q_CountSectionMiss; auto with zarith.
      replace (1 + (m + z) - 1) with (m + z) by lia.
      auto with zarith.
      - replace (1 + (m + z) - 1) with (m + z) by lia.
        auto.
      - replace (1 + (m + z) - 1) with (m + z) by lia.
        auto.
    }
  }
Qed.

Goal typed_ref_external_lemma_CountShift.
Hint CountShift,property.
Proof.
  Require Import Psatz.
  intros v m n t a.
  intros.
  unfold shift_sint32.

  apply natlike_rec2 with (z := n); auto with zarith.
  {
    replace (0 + m) with m by lia.
    rewrite A_Count.Q_CountSectionEmpty; auto with zarith.
    rewrite A_Count.Q_CountSectionEmpty; auto with zarith.
  }
  {
    intros.
    replace (Z.succ z) with (1 + z) by auto with zarith.
    rewrite <- Q_CountSectionOne; auto with zarith.
    replace (1 + z + m) with (1 + (z + m)) by lia.
    symmetry.
    rewrite <- Q_CountSectionOne; auto with zarith.

    cut(L_Count_1_ t a (z + m) (1 + (z + m)) v = 
        L_Count_1_ t (shift a m) z (1 + z) v).
    {
      intros.
      rewrite H3.
      rewrite <- H4.
      trivial.
    }
    {
       remember (t.[shift a (z + m)]) as azm.
       assert (X: azm = v \/ azm <> v) by lia.
       destruct X as [eq|neq].
       {
         rewrite <- A_Count.Q_CountSectionHit; auto with zarith.
         rewrite A_Count.Q_CountSectionEmpty; auto with zarith.
         rewrite <- A_Count.Q_CountSectionHit; auto with zarith.
         {
           rewrite A_Count.Q_CountSectionEmpty; auto with zarith.
         }
         {
           subst azm.
           unfold shift_sint32.
           rewrite shift_associative.
           replace (m + (1 + z -1)) with (z + m) by lia.
           trivial.
         }
         unfold shift_sint32.
         replace (1 + (z + m) - 1) with (z + m) by lia.
         lia.
       }
       {
         rewrite <- A_Count.Q_CountSectionMiss; auto with zarith.
         rewrite A_Count.Q_CountSectionEmpty; auto with zarith.
         rewrite <- A_Count.Q_CountSectionMiss; auto with zarith.
         - replace (1 + z - 1) with z by lia.
           rewrite A_Count.Q_CountSectionEmpty; auto with zarith.
         - unfold shift_sint32.
           replace (1 + z - 1) with z by lia.
           rewrite shift_associative.
           replace (m + z) with (z + m) by lia.
           lia.
         - unfold shift_sint32.
           replace (1 + (z + m) - 1) with (z + m) by lia.
           lia.
       }
    }
  }
Qed.

Goal typed_ref_external_lemma_EqualRangesPreservesCount.
Hint EqualRangesPreservesCount,property.
Proof.
  Require Import Psatz.
  intros v m n p L K a. intros P Q V.
  replace n with (m + (n-m)) by lia.


  apply natlike_rec2 with (z := (n - m)); auto with zarith.
  {
    intros.
    rewrite Zplus_0_r in *.
    replace (p + m - m) with p by lia.
    rewrite A_Count.Q_CountSectionEmpty; auto with zarith.
    rewrite A_Count.Q_CountSectionEmpty; auto with zarith.
  }
  {
    intros z.
    replace (p + (m + z) - m) with (p + z) by lia.
    replace (m + Z.succ z) with (1 + (m+z)) by lia.
    replace (p + (1 + (m + z)) - m) with (1 + (p + z)) by lia.
    intros.
    enough(Y: P_EqualRanges_4_ L K a m (m + z) p).

    assert (X: K.[ shift a (m+z)] =  v \/
               K.[ shift a (m+z)] <> v) by lia.
    destruct X as [eq|neq].
    { 
      rewrite <- A_Count.Q_CountSectionHit; auto with zarith.
      replace (1 + (p + z) - 1) with (p + z) by lia.
      symmetry.
      rewrite <- A_Count.Q_CountSectionHit; auto with zarith.
      replace (1 + (m + z) - 1) with (m + z) by lia.
      symmetry.
      auto with zarith.

      replace (1 + (m + z) - 1) with (m + z) by lia.
      auto.
     
      replace (1 + (p + z) - 1) with (p + z) by lia.
      unfold P_EqualRanges_4_ in H1.
      unfold P_EqualRanges_3_ in H1.
      unfold P_EqualRanges_1_ in H1.
      unfold shift_sint32 in *.
      rewrite <- shift_associative; auto with zarith.
      rewrite <- H1; auto with zarith.
      rewrite shift_associative; auto with zarith.
    }
    {
      rewrite <- A_Count.Q_CountSectionMiss; auto with zarith.
      replace (1 + (p + z) - 1) with (p + z) by lia.
      symmetry.
      rewrite <- A_Count.Q_CountSectionMiss; auto with zarith.
      replace (1 + (m + z) - 1) with (m + z) by lia.
      symmetry.
      auto with zarith.

      replace (1 + (m + z) - 1) with (m + z) by lia.
      auto.
     
      replace (1 + (p + z) - 1) with (p + z) by lia.
      unfold P_EqualRanges_4_ in H1.
      unfold P_EqualRanges_3_ in H1.
      unfold P_EqualRanges_1_ in H1.
      unfold shift_sint32 in *.
      rewrite <- shift_associative; auto with zarith.
      rewrite <- H1; auto with zarith.
      rewrite shift_associative; auto with zarith.
    }

    unfold P_EqualRanges_4_ in *.
    unfold P_EqualRanges_3_ in *.
    unfold P_EqualRanges_1_ in *.
    unfold shift_sint32 in *.
    intros.
    rewrite H1; auto with zarith.
  }

Qed.

Goal typed_ref_external_lemma_EqualRangesPreservesSorted.
Hint EqualRangesPreservesSorted,property.
Proof.
 Require Import Psatz.
 intros m n p L K a; intros.
 subst x.
 unfold P_Sorted_1_.
 unfold P_EqualRanges_4_ in *.
 unfold P_EqualRanges_3_ in *.
 unfold P_EqualRanges_1_ in *.
 intros i j; intros.
 unfold shift_sint32 in *.

 replace i with ((p + m) + (i - p - m)) by lia.
 rewrite <- shift_associative.
 rewrite <- H0; auto with zarith.

 replace j with ((p + m) + (j - p - m)) by lia.
 rewrite <- shift_associative.
 rewrite <- H0; auto with zarith.

 rewrite shift_associative.
 rewrite shift_associative.

 apply H; auto with zarith.
Qed.

Goal typed_ref_external_lemma_HasValueImpliesPositiveCount.
Hint HasValueImpliesPositiveCount,property.
Proof.
  Require Import Psatz.
  intros v m n L a.
  intros A B.

  pose (p := n - m).
  assert (non_negative: p >= 0).
  {
    subst p.
    lia.
  }

  replace n with (m + p) in * by (subst p; auto with zarith).

  apply natlike_rec2 with (z := p); auto with zarith.
  {
   replace (m + 0) with m by lia.
   intros.
   unfold P_HasValue_1_ in H0.
   destruct H0 as [k [X Y]].
   exfalso.
   intuition.
  }
  {
    intros.
    rename H0 into IndStep.
    rename H2 into IndHyp.
    replace (Z.succ z) with (1 + z) in * by lia.
    replace (m + (1 + z)) with (1 + (m + z)) in * by lia.

    assert (Value: L.[ shift a (m + z)] = v \/ L.[ shift a (m + z)] <> v) by tauto.
    destruct Value as [eq|neq].
    {
      rewrite <- A_Count.Q_CountSectionHit; auto with zarith.
      - replace (1 + (m + z) - 1) with (m + z) by lia.
        assert (X: 0 <= (L_Count_1_ L a m (m + z) v)).
        + apply Q_CountSectionBounds; auto with zarith.
        + auto with zarith.
      - replace (1 + (m + z) - 1) with (m + z) by lia.
        auto with zarith.
    }
    {
      rewrite <- A_Count.Q_CountSectionMiss; auto with zarith.
      - replace (1 + (m + z) - 1) with (m + z) by lia.
        apply IndStep; auto with zarith.
        unfold P_HasValue_1_ in IndHyp.
        destruct IndHyp as [k [X Y]].
        unfold P_HasValue_1_.
        exists k.
        split; auto with zarith.
        enough (Z: m <= k < m + z \/ k = m + z).
        + destruct Z as [less|equal].
          ++ auto.
          ++ rewrite equal in X.
             exfalso.
             intuition.
        + assert(ZZ: k < m + z \/ k >= m + z) by tauto.
          destruct ZZ as [le|geq]; auto with zarith.
      - replace (1 + (m + z) - 1) with (m + z) by lia.
        auto.
     }
  }
Qed.

Goal typed_ref_external_lemma_HeapMaximum.
Hint HeapMaximum,property.
Proof.
  Require Import Psatz.
  intros.

  (* for me it somehow easier to first proof this slight reformulation and apply it later *)
  assert(Reformulate: 
           forall (i : int) (s : farray addr int) (b : addr),
           let x := 1 + i in 0 <= i -> P_IsHeap s b x -> P_MaxElement s b x 0).
  {
    intros n s b.
    intros x A.
    subst x.
    apply natlike_rec2 with (z := n); auto with zarith.
    {
      rewrite Zplus_0_r.
      intros.
      unfold P_MaxElement.
      split; auto with zarith.
      split; auto with zarith.
      unfold P_UpperBound_2_.
      unfold P_UpperBound_1_.
      intros.
      replace i0 with 0 by lia.
      lia.
    }
    {
      intros z.
      intros.
      replace (Z.succ z) with (1+z) in * by lia.

       assert(X: P_IsHeap s b (1+z)).
       {
         unfold P_IsHeap.
         intros.
         apply H3; auto with zarith.
       }
       assert(Y: P_MaxElement s b (1+z) 0).
       {
        apply H2; auto with zarith.
       }
       unfold P_MaxElement.
       unfold P_UpperBound_2_.
       unfold P_UpperBound_1_.
       split; auto with zarith.
       split; auto with zarith.
       intros.

       assert(less_equal: i0 < 1+z \/ i0 = 1+z) by lia.
       destruct less_equal as [less|equal].
       {
         apply Y; auto with zarith.
       }
       {
         rewrite equal.
         assert(Z: s .[ shift_sint32 b (1+z)] <= s .[ shift_sint32 b (L_HeapParent (1+z))]).
         {
           apply H3; auto with zarith.
         }
         assert(ZZ: s .[ shift_sint32 b (L_HeapParent (1+z))] <= s .[ shift_sint32 b 0]).
         {
           unfold L_HeapParent.
           replace (1+z-1) with z by lia.
           apply Y; auto with zarith.
           apply Q_C_Division_2; lia.
           cut (Cdiv z 2 <= z); auto with zarith. 
           apply Q_C_Division_2; lia.
         }
         lia.
       }
     }
  }

  replace i with (1+(i-1)) by lia.
  apply Reformulate; auto with zarith.
  replace (1+(i-1)) with i by lia.
  trivial.

Qed.

Goal typed_ref_external_lemma_LowerBoundShift.
Hint LowerBoundShift,property.
Proof.
  Require Import Psatz.
  unfold P_LowerBound_1_.
  intros val b c d L a H0 LowerBound i X Y.
  replace i with (b + (i - b)) by lia.

  rewrite <- shift_associative.
  apply LowerBound; lia.

Qed.

Goal typed_ref_external_lemma_MultisetUnchangedUnion.
Hint MultisetUnchangedUnion,property.
Proof.
  unfold P_MultisetUnchanged_1_ in *.
  intros.
  remember i0 as v.
  remember i as n.
  remember i_1 as k.

  rewrite Q_CountSectionUnion with (i_1 := k); auto with zarith.
  symmetry.
  rewrite Q_CountSectionUnion with (i_1 := k); auto with zarith.
  rewrite H1; auto with zarith.
  rewrite H2; auto with zarith.

Qed.

Goal typed_ref_external_lemma_PartialReorderPreservesLowerBounds.
Hint PartialReorderPreservesLowerBounds,property.
Proof.
  intros m n L K a.
  intros.

  cut (P_LowerBound_1_ K a m n (L .[ shift_sint32 a 0])). 
  {
    unfold P_LowerBound_1_.
    intros.
    apply Z.ge_le.
    rewrite <- H1; auto with zarith.
    apply Z.le_ge.
    apply H4; auto with zarith.
  }

  enough (X: P_HasValue_1_ K a 0 m (L .[ shift_sint32 a 0])).
  + unfold P_HasValue_1_ in X.
    destruct X as [k [A B]].
    rewrite <- A.
    apply H3; auto with zarith.
  + apply Q_ReorderImpliesMatch; auto with zarith.
Qed.

Goal typed_ref_external_lemma_PositiveCountImpliesHasValue.
Hint PositiveCountImpliesHasValue,property.
Proof.
  Require Import Psatz.
  intros v m n L a.
  intros A B.

  pose (p := n - m).
  assert (non_negative: p >= 0).
  {
    subst p.
    lia.
  }

  replace n with (m + p) in *.
  apply natlike_rec2 with (z := p); auto with zarith.
  {
   replace (m + 0) with m by lia.
   intros.
   rewrite A_Count.Q_CountSectionEmpty in H; auto with zarith.
   exfalso.
   intuition.
  }
  {
    intros.
    rename H0 into IndStep.
    rename H1 into IndHyp.
    replace (Z.succ z) with (1 + z) in * by lia.
    replace (m + (1 + z)) with (1 + (m + z)) in * by lia.

    assert (Value: L.[ shift a (m + z)] = v \/ L.[ shift a (m + z)] <> v) by tauto.
    destruct Value as [eq|neq].
    {
      unfold P_HasValue_1_.
      exists (m + z).
      split; auto with zarith.
    }
    {
      rewrite <- A_Count.Q_CountSectionMiss in IndHyp; auto with zarith.
      replace (1 + (m + z) - 1) with (m + z) in * by lia.
       - cut (P_HasValue_1_ L a m (m + z) v).
          + unfold P_HasValue_1_ .
            intros X.
            destruct X as [k [P Q]].
            exists k.
            split; auto with zarith.
          + apply IndStep; auto.
        - replace (1 + (m + z) - 1) with (m + z) by lia.
          unfold shift_sint32.
          auto with zarith.
      }
    }

    subst p; lia.
Qed.

Goal typed_ref_external_lemma_RemoveCountMonotonic.
Hint RemoveCountMonotonic,property.
Proof.
  Require Import Psatz.
  unfold L_RemoveCount in *.
  intros v m n M a.
  intros.

  cut(m + (L_Count_2_ M a n v) <= n + (L_Count_2_ M a m v)); auto with zarith.
  rewrite <- Q_CountUnion with (i_1 := m); auto with zarith.
  unfold L_Count_2_.
  cut (m + L_Count_1_ M a m n v <= n); auto with zarith.
  apply Q_CountSectionBounds; auto with zarith.
Qed.

Goal typed_ref_external_lemma_ReorderImpliesMatch.
Hint ReorderImpliesMatch,property.
Proof.
  intros i n L K a.
  intros.
  unfold P_HasValue_2_.
  unfold P_MultisetUnchanged_2_ in H1.
  unfold P_MultisetUnchanged_1_ in H1.
  (* unfold shift_sint32 in *. *)

  remember (L .[ shift_sint32 a i]) as v.

  (* work around for https://bts.frama-c.com/view.php?id=2332 *)
  assert(CType: is_sint32 v) by admit.

  assert(Has: P_HasValue_1_ L a 0 n v).
  - unfold P_HasValue_1_.
    exists i. 
    auto with zarith.
  - assert (Pos: 0 < L_Count_1_ L a 0 n v).
    + apply Q_HasValueImpliesPositiveCount; auto with zarith.
    + apply Q_PositiveCountImpliesHasValue; auto with zarith.
      rewrite H1; auto with zarith.
Admitted.

Goal typed_ref_external_lemma_ReorderPreservesLowerBound.
Hint ReorderPreservesLowerBound,property.
Proof.
  intros n v L K a. intros.
  assert(n_cases: 0 < n \/ 0 = n \/ 0 > n) by apply Ztrichotomy.
  destruct n_cases as [pos | non_pos].
  - 
    unfold P_LowerBound_2_.
    unfold P_LowerBound_1_.
    intros.
    assert (X: P_HasValue_2_ K a n (L .[ shift_sint32 a i])).
    + apply Q_ReorderImpliesMatch; auto with zarith.
    + unfold P_HasValue_2_ in X.
      unfold P_HasValue_1_ in X.
      destruct X as [k [A B]].
      rewrite <- A.
      apply H2; auto with zarith.
  - 
    unfold P_LowerBound_2_.
    unfold P_LowerBound_1_.
    intros.
    auto with zarith.
Qed.

Goal typed_ref_external_lemma_ReorderPreservesUpperBound.
Hint ReorderPreservesUpperBound,property.
Proof.
  intros n v L K a. intros.
  assert(n_cases: 0 < n \/ 0 = n \/ 0 > n) by apply Ztrichotomy.
  destruct n_cases as [pos | non_pos].
  -
    unfold P_UpperBound_2_.
    unfold P_UpperBound_1_.
    intros.
    assert (X: P_HasValue_2_ K a n (L .[ shift_sint32 a i])).
    + apply Q_ReorderImpliesMatch; auto with zarith.
    + unfold P_HasValue_2_ in X.
      unfold P_HasValue_1_ in X.
      destruct X as [k [A B]].
      rewrite <- A.
      apply H2; auto with zarith.
  -
    unfold P_UpperBound_2_.
    unfold P_UpperBound_1_.
    intros.
    auto with zarith.
Qed.

Goal typed_ref_external_lemma_RetainAllButOneMiss.
Hint RetainAllButOneMiss,property.
Proof.
  Require Import Psatz.
  intros.

  remember a_1 as A.
  remember a   as B.
  remember i_2 as v.
  remember i_1 as m.
  remember i   as n.
  remember t   as K.
  remember t_1 as L.

  subst x a_2.
  unfold P_RetainAllButOne in *.
  intros x. intros.

  assert(X: x =  L .[ shift_sint32 A m] \/ x <> L .[ shift_sint32 A m]) by lia.

  destruct X as [eq|neq].
  {
    rewrite Q_CountHit; auto with zarith.
    rewrite <- Q_CountRead with (t := K); auto with zarith.
    - symmetry.
      rewrite Q_CountHit; auto with zarith.
      rewrite <- Q_CountRead with (t := K); auto with zarith.
      rewrite <- H5; auto with zarith.
    - apply Q_UnchangedSection with (i := 1+m); auto with zarith.
  }
  {
    rewrite <- Q_CountMiss; auto with zarith.
    rewrite <- Q_CountRead with (t := K); auto with zarith.
    - symmetry.
      rewrite <- Q_CountMiss; auto with zarith.
      rewrite <- Q_CountRead with (t := K); auto with zarith.
      rewrite H5; auto with zarith.
    - apply Q_UnchangedSection with (i := 1+m); auto with zarith.
  }

Qed.

Goal typed_ref_external_lemma_RotatePreservesStrictLowerBound.
Hint RotatePreservesStrictLowerBound,property.
Proof.
  Require Import Psatz.
  intros m n L K a. intros.
  subst x. subst x_1.
  unfold P_StrictLowerBound_1_ in *.
  intros.
  unfold P_EqualRanges_4_ in *.
  unfold P_EqualRanges_3_ in *.
  unfold P_EqualRanges_1_ in *.

  unfold shift_sint32 in *.

  replace m with (m + 0) by lia.
  rewrite <- shift_associative.
  rewrite <- H; auto with zarith.

  replace i with ((1 + m) + (i - (1 + m))) by lia.
  rewrite <- shift_associative.
  rewrite <- H0; auto with zarith.

  rewrite shift_associative. 
  rewrite shift_associative.

  replace (n + 0) with n by lia.
  replace (m + (i - (1 + m))) with (i - 1) by lia.
  apply H1; auto with zarith.
Qed.

Goal typed_ref_external_lemma_StrictLowerBoundShift.
Hint StrictLowerBoundShift,property.
Proof.
  Require Import Psatz.
  unfold P_StrictLowerBound_1_ in *.
  unfold shift_sint32 in *.
  intros.
  replace i0 with (i_2 + (i0 - i_2)) by lia.

  rewrite <- shift_associative.
  apply H0; lia.

Qed.

Goal typed_ref_external_lemma_StrictUpperBoundShift.
Hint StrictUpperBoundShift,property.
Proof.
  Require Import Psatz.
  unfold P_StrictUpperBound_1_ in *.
  unfold shift_sint32 in *.
  intros.
  replace i0 with (i_1 + (i0 - i_1)) by lia.

  rewrite <- shift_associative.
  apply H0; lia.

Qed.

Goal typed_ref_external_lemma_SwappedInsideMultisetUnchanged.
Hint SwappedInsideMultisetUnchanged,property.
Proof.
  Require Import Psatz.
  intros i k n L K a.
  intros.
  unfold P_SwappedInside in H.
  destruct H as [A1 [A2 [A3 [A4 [A5 [A6 [A7 A8]]]]]]].

  unfold P_MultisetUnchanged_1_.
  intros v. intros.
  rewrite <- Q_CountSectionOne; auto with zarith.
  symmetry.
  rewrite <- Q_CountSectionOne; auto with zarith.
  rewrite <- Q_CountSectionUnion with (i_1 := 1+i); auto with zarith.
  symmetry.
  rewrite <- Q_CountSectionUnion with (i_1 := 1+i); auto with zarith.

  enough (Center: L_Count_1_ L a (1 + i) k v = L_Count_1_ K a (1 + i) k v).
  - rewrite Center.
    enough (Left: L_Count_1_ L a i (1 + i) v = L_Count_1_ K a k (1 + k) v).
    rewrite Left.
    enough (Right: L_Count_1_ L a k (1 + k) v = L_Count_1_ K a i (1 + i) v).
    rewrite Right.
    auto with zarith.
    + rewrite <- Q_EqualRangesPreservesCount with (i := i) (t_1 := K); auto with zarith.
      replace (i + (1 + k) - k) with (1 + i) by lia.
      trivial.
      unfold P_EqualRanges_4_.
      unfold P_EqualRanges_3_.
      replace (1 + k - k) with 1 by lia.
      unfold P_EqualRanges_1_.
      intros.
      rewrite shift_associative.
      rewrite shift_associative.
      replace (k + i0) with k by lia.
      replace (i + i0) with i by lia.
      auto with zarith.
    + rewrite <- Q_EqualRangesPreservesCount with (i := k) (t_1 := K); auto with zarith.
      replace (k + (1 + i) - i) with (1  + k) by lia.
      trivial.
      unfold P_EqualRanges_4_.
      unfold P_EqualRanges_3_.
      replace (1 + i - i) with (1) by lia.
      unfold P_EqualRanges_1_.
      intros.
      rewrite shift_associative.
      rewrite shift_associative.
      replace (k + i0) with k by lia.
      replace (i + i0) with i by lia.
      auto with zarith.
  - rewrite A_Count.Q_CountSectionRead with (t := K); auto with zarith.
Qed.

Goal typed_ref_external_lemma_SwappedInsidePerservesMultisetUnchanged.
Hint SwappedInsidePerservesMultisetUnchanged,property.
Proof.
  intros i k n M L K a.
  intros.
  assert(Swapped: P_SwappedInside M L a i k n) by assumption.
  destruct Swapped as [A1 [A2 [A3 [A4 [A5 [A6 [A7 A8]]]]]]].

  enough (ML: P_MultisetUnchanged_2_ M L a (1 + k)).
  - apply Q_MultisetUnchangedTransitive with (L); auto.
    + apply Q_MultisetUnchangedUnion with (i_1 := k); auto with zarith.
      apply Q_UnchangedImpliesMultisetUnchanged; auto.
      apply Q_UnchangedSection with (k) (n); auto with zarith.
  - apply Q_MultisetUnchangedUnion with (i_1 := i); auto with zarith.
    + apply Q_SwappedInsideMultisetUnchanged with (i := n); auto.
    + apply Q_UnchangedImpliesMultisetUnchanged; auto.
Qed.

Goal typed_ref_external_lemma_SwappedInsidePreservesMultisetUnchanged.
Hint SwappedInsidePreservesMultisetUnchanged,property.
Proof.
  intros i k n M L K a.
  intros.
  assert(Swapped: P_SwappedInside M L a i k n) by assumption.
  destruct Swapped as [A1 [A2 [A3 [A4 [A5 [A6 [A7 A8]]]]]]].

  enough (ML: P_MultisetUnchanged_2_ M L a (1 + k)).
  - apply Q_MultisetUnchangedTransitive with (L); auto.
    + apply Q_MultisetUnchangedUnion with (i_1 := k); auto with zarith.
      apply Q_UnchangedImpliesMultisetUnchanged; auto.
      apply Q_UnchangedSection with (k) (n); auto with zarith.
  - apply Q_MultisetUnchangedUnion with (i_1 := i); auto with zarith.
    + apply Q_SwappedInsideMultisetUnchanged with (i := n); auto.
    + apply Q_UnchangedImpliesMultisetUnchanged; auto.
Qed.

Goal typed_ref_external_lemma_UnchangedShift.
Hint UnchangedShift,property.
Proof.
  intros p q r K L.
  intros.
  unfold P_Unchanged_1_ in *.
  unfold shift_sint32 in *.
  intros.

  remember (i - p) as k.
  replace i with (p + k) by auto with zarith.
  replace (shift a (p + k)) with (shift (shift a p) k).
  - apply H; auto with zarith.
  - rewrite shift_associative.
    trivial.

Qed.

Goal typed_ref_external_lemma_UpperBoundShift.
Hint UpperBoundShift,property.
Proof.
  Require Import Psatz.
  unfold P_UpperBound_1_ in *.
  unfold shift_sint32 in *.
  intros.
  replace i0 with (i_1 + (i0 - i_1)) by lia.

  rewrite <- shift_associative.
  apply H0; lia.

Qed.

Goal typed_ref_external_lemma_WeaklySortedImpliesSorted.
Hint WeaklySortedImpliesSorted,property.
Proof.
  Require Import Psatz.
  intros m n L a MN.
  replace n with (m + (n-m)) by lia.

  apply natlike_rec2 with (z := (n - m)); auto with zarith.
  {
    intros.
    rewrite Zplus_0_r in *.
    unfold P_Sorted_1_.
    intros i j.
    intros.
    auto with zarith. (* empty domain *)
  }
  {
    intros.
    rename H0 into IndStep.
    rename H2 into IndHyp.

    replace (Z.succ z) with (1 + z) in * by auto with zarith.
    unfold P_Sorted_1_.
    intros i j.
    intros.

    assert(X: j < m + z \/ j >= m + z) by tauto.
    destruct X as [le|geq].
    {
      apply IndStep; auto with zarith.
      unfold P_WeaklySorted_1_.
      intros k. intros.
      apply IndHyp; auto with zarith.
    }
    {
      assert (eq: j = m + z) by auto with zarith.
      rewrite <- eq in *.
      assert(XX: i < j - 1 \/ i >= j - 1) by tauto.
      destruct XX as [le1|geq1].
      {
        assert(Y: L .[ shift_sint32 a (j-1)] <= L .[ shift_sint32 a j]).
        {
          replace j with (1 + (j-1)) by auto with zarith.
          replace ((1 + (j - 1) - 1)) with (j-1) by auto with zarith.
          unfold P_WeaklySorted_1_ in IndHyp.
          apply IndHyp; auto with zarith.
        }
        assert(Z: L.[ shift_sint32 a i] <= L .[ shift_sint32 a (j-1)]).
        {
          apply IndStep; auto with zarith.
          unfold P_WeaklySorted_1_.
          intros k. intros.
          apply IndHyp; auto with zarith.
        }
        auto with zarith.
      }
      {
        assert(EQ: i = j - 1) by auto with zarith.
        replace j with (1 + (j - 1)) by auto with zarith.
        rewrite EQ.
        apply IndHyp; auto with zarith.
      }
    }
  }
Qed.

Goal typed_ref_external_mismatch_loop_inv_bound_preserved.
Hint bound,mismatch,preserved.
Proof.
  auto with zarith.

Qed.

Goal typed_ref_external_my_lrand48_assert_lower_2.
Hint lower,my_lrand48,property.
Proof.
(* auto with zarith. *)
Qed.

Goal typed_ref_external_push_heap_assert_reorder_5.
Hint property,push_heap,reorder.
Proof.
(* --------------------------------------
  
From 'typed_ref_external_push_heap_stmt_post_heap_4': 
(* auto with zarith. *)
*)
(* --------------------------------------
  
From 'typed_ref_external_push_heap_stmt_post_heap_3': 
(* --------------------------------------
  
From 'typed_ref_external_push_heap_stmt_post_heap_4': 
(* auto with zarith. *)
*)
*)
Qed.

Goal typed_ref_external_push_heap_stmt_post_heap_3.
Hint default,heap,property,push_heap.
Proof.
(* --------------------------------------
  
From 'typed_ref_external_push_heap_stmt_post_heap_4': 
(* auto with zarith. *)
*)
Qed.

Goal typed_ref_external_push_heap_stmt_post_heap_4.
Hint default,heap,property,push_heap.
Proof.
(* auto with zarith. *)
Qed.

Goal typed_ref_external_remove_copy_assert_retain.
Hint property,remove_copy,retain.
Proof.
  intros.
  apply Q_MultisetRetainRestMiss.

Qed.

Goal typed_ref_external_remove_copy_assert_retain_2.
Hint property,remove_copy,retain.
Proof.
  intros.
  remember (t_1 .[ a_5 <- x]) as M.

  subst x_1.
  remember (L_RemoveCount t_2 a_1 i_2 i) as j.
  rewrite H14.
  (* replace x_1 with (1 + (x_1 -1)) by auto with zarith. *)
  (* replace x_2 with (1 + (x_2 -1)) by auto with zarith. *)
  apply Q_MultisetRetainRestMiss with (t_1); auto with zarith.

Qed.

Goal typed_ref_external_remove_copy_core_active_post_retain_2.
Hint active,property,remove_copy_core,retain.
Proof.
(* auto with zarith. *)

Qed.

Goal typed_ref_external_remove_copy_post_bound.
Hint bound,default,property,remove_copy.
Proof.
  auto with zarith.

Qed.

Goal typed_ref_external_replace_copy_loop_inv_bounds_preserved.
Hint bounds,preserved,replace_copy.
Proof.
  auto with zarith.

Qed.

Goal typed_ref_external_search_loop_inv_bound_established.
Hint bound,established,search.
Proof.
  auto with zarith.

Qed.

Goal typed_ref_external_sort_heap_loop_inv_bound_preserved.
Hint bound,preserved,sort_heap.
Proof.
  auto with zarith.

Qed.

Goal typed_ref_lemma_AdjacentDifferenceInverse.
Hint AdjacentDifferenceInverse,property.
Proof.
  intros n L K A B H.

  apply natlike_rec2 with (z := n); auto with zarith.
  {
    intros.
    unfold P_Unchanged_2_ in *.
    unfold P_Unchanged_1_ in *.
    intros.
    intuition.
  }
  {
    intros.
    Require Import Psatz.
    replace (Z.succ z) with (1+z) in * by lia.

    assert(X: P_Unchanged_2_ L K A z). {
      apply H1; auto with zarith.
      - apply Q_UnchangedSection with (i := 1+z); auto with zarith.
      - apply Q_PartialSumSection with (i := 1+z); auto with zarith.
      - apply Q_AdjacentDifferenceSection with (i := 1+z); auto with zarith.
    } 

    unfold P_Unchanged_2_.
    unfold P_Unchanged_1_.
    intros.

    assert(Y: i < z \/ i = z) by lia.
    destruct Y as [less|equal].
    {
      apply X; auto with zarith.
    }
    {
      rewrite equal.
      rewrite H3; auto with zarith.
      rewrite Q_AccumulateDefaultNext; auto with zarith.
      rewrite H2; auto with zarith.
      rewrite <- H4; auto with zarith.

      assert (Z: z = 0 \/ z > 0) by lia.
      destruct Z as [zero|pos].
      {
        rewrite zero.
        rewrite Q_DifferenceEmptyOrSingle; auto with zarith.
        rewrite <- Q_AccumulateDefault0; lia.
      }
      {
        rewrite Q_DifferenceNext; auto with zarith.
        cut ((K .[ shift_sint32 A (z - 1)]) = L_Accumulate_2_ L B z).
        - lia.
        - rewrite <- X; auto with zarith.
          rewrite H3; auto with zarith.
          replace (1 + (z-1)) with z by lia.
          trivial.
      }
    }
  }

Qed.

Goal typed_ref_lemma_CountSectionBounds.
Hint CountSectionBounds,property.
Proof.
  Require Import Psatz.
  intros.
  subst x.
  remember i_1 as m.
  remember i   as n.
  remember i_2 as v.
 
  replace n with (m + (n-m)) by lia.
  apply natlike_rec2 with (z := (n - m)); auto with zarith.
  {
    rewrite Zplus_0_r.
    rewrite <- A_Count.Q_CountSectionEmpty; auto with zarith.
  }
  {
    intros.
    replace (m + Z.succ z) with (1 + (m+z)) by lia.

    assert (X: t.[ shift a (m+z)] =  v \/
               t.[ shift a (m+z)] <> v) by lia.
    destruct X as [eq|neq]. 
    - rewrite A_Count.Q_CountSectionHit; auto with zarith.
    - rewrite <- A_Count.Q_CountSectionMiss; auto with zarith.
  }

Qed.

Goal typed_ref_lemma_CountSectionMonotonic.
Hint CountSectionMonotonic,property.
Proof.
  Require Import Psatz.
  intros.
  remember i_3 as v.
  remember i_2 as m.
  remember i   as p.
  remember i_1 as n.

  replace p with (n + (p-n)) by lia.
  apply natlike_rec2 with (z := (p - n)); auto with zarith.
  {
    replace (n+0) with n by lia.
    lia.
  }
  {
    intros.
    replace (n + Z.succ z) with (1 + (n+z)) by lia.

    assert (X: t.[ shift a (n+z)] =  v \/
               t.[ shift a (n+z)] <> v) by lia.
    destruct X as [eq|neq].
    - rewrite A_Count.Q_CountSectionHit; auto with zarith.
    - rewrite <- A_Count.Q_CountSectionMiss; auto with zarith.

  }

Qed.

Goal typed_ref_lemma_CountSectionUnion.
Hint CountSectionUnion,property.
Proof.
  Require Import Psatz.
  intros.
  remember i_2 as v.
  remember i   as n.
  remember i_1 as m.

  replace n with (m + (n-m)) by lia.
  apply natlike_rec2 with (z := (n - m)); auto with zarith.
  {
    rewrite Zplus_0_r.
    replace (L_Count_1_ t a m m v) with 0 by (rewrite <- A_Count.Q_CountSectionEmpty; auto with zarith).
    lia.
  }
  {
    intros.
    replace (m + Z.succ z) with (1 + (m+z)) by lia.

    assert (X: t.[ shift a (m+z)] =  v \/ t.[ shift a (m+z)] <> v) by lia.
    destruct X as [eq|neq].
    {
      rewrite A_Count.Q_CountSectionHit; auto with zarith.
      rewrite H3; auto with zarith.
      symmetry.
      rewrite A_Count.Q_CountSectionHit; auto with zarith.
    }
    {
      rewrite <- A_Count.Q_CountSectionMiss; auto with zarith.
      symmetry.
      rewrite <- A_Count.Q_CountSectionMiss; auto with zarith.
    }
  }

Qed.

Goal typed_ref_lemma_HeapBounds.
Hint HeapBounds,property.
Proof.
(* auto with zarith. *)

Qed.

Goal typed_ref_lemma_HeapMaximum.
Hint HeapMaximum,property.
Proof.
  Require Import Psatz.
  intros.

  (* for me it somehow easier to first proof this slight reformulation and apply it later *)
  assert(Reformulate: 
           forall (i : int) (s : farray addr int) (b : addr),
           let x := 1 + i in 0 <= i -> P_IsHeap s b x -> P_MaxElement s b x 0).
  {
    intros n s b.
    intros x A.
    subst x.
    apply natlike_rec2 with (z := n); auto with zarith.
    {
      rewrite Zplus_0_r.
      intros.
      unfold P_MaxElement.
      split; auto with zarith.
      split; auto with zarith.
      unfold P_UpperBound_2_.
      unfold P_UpperBound_1_.
      intros.
      replace i0 with 0 by lia.
      lia.
    }
    {
      intros z.
      intros.
      replace (Z.succ z) with (1+z) in * by lia.

       assert(X: P_IsHeap s b (1+z)).
       {
         unfold P_IsHeap.
         intros.
         apply H3; auto with zarith.
       }
       assert(Y: P_MaxElement s b (1+z) 0).
       {
        apply H2; auto with zarith.
       }
       unfold P_MaxElement.
       unfold P_UpperBound_2_.
       unfold P_UpperBound_1_.
       split; auto with zarith.
       split; auto with zarith.
       intros.

       assert(less_equal: i0 < 1+z \/ i0 = 1+z) by lia.
       destruct less_equal as [less|equal].
       {
         apply Y; auto with zarith.
       }
       {
         rewrite equal.
         assert(Z: s .[ shift_sint32 b (1+z)] <= s .[ shift_sint32 b (L_HeapParent (1+z))]).
         {
           apply H3; auto with zarith.
         }
         assert(ZZ: s .[ shift_sint32 b (L_HeapParent (1+z))] <= s .[ shift_sint32 b 0]).
         {
            (* jg: somehow Frama-C/Why/Coq cannot find the ACSL lemma HeapBounds ...
                   so I have to do a clumsy proof by hand *)
            assert (HeapBoundsBug: forall k, let x := ((Cdiv k 2))%Z in
                       ((0 <= k)%Z) -> (((x <= k)%Z) /\ ((0 <= x)%Z))).
            {
              intros.
              subst x.
              replace (Cdiv k 2) with (k/2).
              {
                split.
                - assert(OR: 0 < k \/ 0 = k) by (apply Zle_lt_or_eq; lia).
                  destruct OR as [less | zero].
                  + cut (k/2 < k).
                    ++ auto with zarith.
                    ++ apply Z_div_lt; lia.
                  + rewrite <- zero.
                    auto with zarith.  
                - apply Z_div_pos; lia.
              }
              {
                symmetry.
                apply Cdiv_cases; lia.
              }
            }

           unfold L_HeapParent.
           replace (1+z-1) with z by lia.
           apply Y; auto with zarith.
           - apply HeapBoundsBug; lia. (* here Q_HeapBounds should be visibile but it isn't *)
           - cut (Cdiv z 2 <= z); auto with zarith.
             apply HeapBoundsBug; lia. (* here Q_HeapBounds should be visibile but it isn't *)
         }
         lia.
       }
     }
  }

  replace i with (1+(i-1)) by lia.
  apply Reformulate; auto with zarith.
  replace (1+(i-1)) with i by lia.
  trivial.

Qed.

Goal typed_ref_lemma_LowerBoundShift.
Hint LowerBoundShift,property.
Proof.
  Require Import Psatz.
  unfold P_LowerBound_1_.
  intros val b c d L a H0 LowerBound i X Y.
  replace i with (b + (i - b)) by lia.

  enough (Assoc: forall q m n, shift (shift q m) n = shift q (m+n)). 
  {
    rewrite <- Assoc.
    apply LowerBound; lia.
  }
  {
    intros.
    unfold shift; cbn.
    replace (offset q + m + n) with (offset q + (m + n)) by lia.
    trivial.
  }

Qed.

Goal typed_ref_lemma_MultisetUnchangedUnion.
Hint MultisetUnchangedUnion,property.
Proof.
  unfold P_MultisetUnchanged_1_ in *.
  intros.
  remember i0 as v.
  remember i as n.
  remember i_1 as k.

  rewrite Q_CountSectionUnion with (i_1 := k); auto with zarith.
  symmetry.
  rewrite Q_CountSectionUnion with (i_1 := k); auto with zarith.
  rewrite H1; auto with zarith.
  rewrite H2; auto with zarith.

Qed.

Goal typed_ref_lemma_RemoveCountMonotonic.
Hint RemoveCountMonotonic,property.
Proof.
  Require Import Psatz.
  unfold L_RemoveCount in *.
  intros v m n M a.
  intros.

  cut(m + (L_Count_2_ M a n v) <= n + (L_Count_2_ M a m v)); auto with zarith.
  rewrite Q_CountUnion with (i_1 := m); auto with zarith.
  unfold L_Count_2_.
  cut (m + L_Count_1_ M a m n v <= n); auto with zarith.
  apply Q_CountSectionBounds; auto with zarith.

Qed.

Goal typed_ref_lemma_ReverseIdempotentLeft.
Hint ReverseIdempotentLeft,property.
Proof.
  Require Import Psatz.
  intros m n K L M.
  intros.
  subst x.
  unfold P_Reverse_4_ in *.
  unfold P_Reverse_1_ in *.
  unfold P_EqualRanges_2_.
  unfold P_EqualRanges_1_.
  unfold shift_sint32 in *.
  intros.

  assert(Shift: forall p k l,
         (shift (shift p k) l) = (shift p (k + l))).
  {
    intros.
    unfold shift.
    simpl.
    replace (offset p + k + l) with (offset p + (k + l)) by lia.
    trivial.
  }

  symmetry.
  rewrite <- Shift.

  rewrite H0; auto with zarith.
  replace (n - m + m - 1 - 0 - i) with (n - 1 - i) by lia.

  pose ( j := n - 1 - i - m).
  assert( 0 <= j) by (subst j; lia).
  assert( m + j < n) by (subst j; lia).

  replace (n - 1 - i) with (m + j) by (subst j; lia).
  rewrite H; auto with zarith.

  subst j.
  replace (n + m - 1 - m - (n - 1 - i - m)) with (m+i) by lia.
  trivial.

Qed.

Goal typed_ref_lemma_ReverseIdempotentRight.
Hint ReverseIdempotentRight,property.
Proof.
 Require Import Psatz.
  intros m n K L M.
  intros.
  subst x.
  unfold P_Reverse_4_ in *.
  unfold P_Reverse_2_ in *.
  unfold P_Reverse_1_ in *.
  unfold P_EqualRanges_2_.
  unfold P_EqualRanges_1_.
  unfold shift_sint32 in *.
  intros.

  assert(Shift: forall p k l,
         (shift (shift p k) l) = (shift p (k + l))).
  {
    intros.
    unfold shift.
    simpl.
    replace (offset p + k + l) with (offset p + (k + l)) by lia.
    trivial.
  }

  symmetry.
  rewrite <- Shift.

  rewrite H0; auto with zarith.
  replace (n - (n - m) - 1 - i)  with (m - 1 - i) by lia.

  pose ( j := m - 1 - i).
  assert( 0 <= j < m) by (subst j; lia).
  replace (m - 1 - i) with (0 + j) by (subst j; lia).
  rewrite H; auto with zarith.
  subst j.

  replace (m - 0 - 1 - (0 + (m - 1 - i))) with (i) by lia.
  rewrite Shift; trivial.

Qed.

Goal typed_ref_lemma_ReverseShift.
Hint ReverseShift,property.
Proof.
  Require Import Psatz.
  intros p q K L.
  intros.
  unfold P_Reverse_6_ in *.
  unfold P_Reverse_5_ in *.
  unfold P_Reverse_1_ in *.
  unfold shift_sint32 in *.
  intros.

  assert(Shift: forall z k l, (shift (shift z k) l) = (shift z (k + l))).
  {
    intros.
    unfold shift.
    simpl.
    replace (offset z + k + l) with (offset z + (k + l)) by lia.
    trivial.
  }

  replace (shift a (p + i)) with (shift (shift a p) (0 + i)).
  - rewrite H; auto with zarith.
    rewrite Shift.
    replace (p + (q - p + 0 - 1 - 0 - i)) with (q + p - 1 - p - i) by lia.
    trivial.
  - rewrite Shift.
    replace (0 + i) with i by lia.
    trivial.

Qed.

Goal typed_ref_lemma_ReverseSwitch.
Hint ReverseSwitch,property.
Proof.
  intros p q r K L.
  intros.
  unfold P_Reverse_4_ in *.
  unfold P_Reverse_1_ in *.
  unfold shift_sint32 in *.
  intros.
  replace (r + q - p + p - 1 - r - i) with (q - 1 - i) by auto with zarith.
  assert(p + i < q) by auto with zarith.

Qed.

Goal typed_ref_lemma_ReverseUnion.
Hint ReverseUnion,property.
Proof.
  intros p q K L.
  intros.
  unfold P_Reverse_4_ in *.
  unfold P_Reverse_1_ in *.
  unfold shift_sint32 in *.
  intros.

  assert(X: i < p \/ i >= p) by tauto.
  destruct X as [lower|upper].
  {
    rewrite H1; auto with zarith.
    replace (p + q - 1 - 0 - i) with (q + p - 1 - 0 - i) by auto with zarith.
    trivial.
  }
  {
       pose (j := i - p).
       replace (0 + i) with (p + j).
       replace (q + p - 1 - 0 - i) with (q + p - 1 - p - j).
       rewrite H2; auto with zarith.
       - subst j; auto with zarith.
       - subst j; auto with zarith.
       - subst j; auto with zarith.
       - subst j; auto with zarith.
  }

Qed.

Goal typed_ref_lemma_StrictLowerBoundShift.
Hint StrictLowerBoundShift,property.
Proof.

  Require Import Psatz.
  unfold P_StrictLowerBound_1_ in *.
  unfold shift_sint32 in *.
  intros.
  replace i0 with (i_2 + (i0 - i_2)) by lia.

  assert(Assoc: forall q m n, shift (shift q m) n = shift q (m+n)).
  {
    intros.
    unfold shift; cbn.
    replace (offset q + m + n) with (offset q + (m + n)) by lia.
    trivial.
  }
  rewrite <- Assoc.
  apply H0; lia.

Qed.


