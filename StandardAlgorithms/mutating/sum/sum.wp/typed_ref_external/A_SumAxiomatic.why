(* ---------------------------------------------------------- *)
(* --- Axiomatic 'SumAxiomatic'                           --- *)
(* ---------------------------------------------------------- *)
theory A_SumAxiomatic
  
use import bool.Bool
use import int.Int
use import int.ComputerDivision
use import real.RealInfix
use import Qed.Qed
use import int.Abs as IAbs
use import map.Map
use import Memory.Memory

function l_Sum (map addr int) addr int : int

axiom Q_SumNext:
  forall n_0 : int. forall mint_0 : map addr int. forall a_0 : addr.
    ((l_Sum mint_0 a_0 (1 + n_0)))
      = (((l_Sum mint_0 a_0 n_0)) + mint_0[(shift a_0 n_0)])

axiom Q_SumEmpty:
  forall n_0 : int. forall mint_0 : map addr int. forall a_0 : addr.
    (n_0 <= 0) -> (0 = ((l_Sum mint_0 a_0 n_0)))

end

