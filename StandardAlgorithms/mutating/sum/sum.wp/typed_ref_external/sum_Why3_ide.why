(* ---------------------------------------------------------- *)
(* --- Post-condition (file sum.h, line 13) in 'sum'      --- *)
(* ---------------------------------------------------------- *)
theory VCsum_post
  
use import bool.Bool
use import int.Int
use import int.ComputerDivision
use import real.RealInfix
use import Qed.Qed
use import int.Abs as IAbs
use import map.Map
use import Memory.Memory
use import Cint.Cint
use import A_SumAxiomatic.A_SumAxiomatic

goal WP "expl:Post-condition (file sum.h, line 13) in 'sum'":
  forall i_0 n_0 : int.
  forall malloc_0 : map int int.
  forall mint_1 mint_0 : map addr int.
  forall a_0 : addr.
  let x_0 = (l_Sum mint_0 a_0 i_0) in
  (0 <= i_0) ->
  (i_0 <= n_0) ->
  (n_0 <= i_0) ->
  ((linked malloc_0)) ->
  ((is_uint32 i_0)) ->
  ((is_uint32 n_0)) ->
  ((-2147483648) <= x_0) ->
  (x_0 <= 2147483647) ->
  ((is_sint32 x_0)) ->
  ((is_sint32 mint_1[(shift a_0 i_0)])) ->
  ((valid_rd malloc_0 ((shift a_0 0)) n_0)) ->
  (forall i_1 : int. let x_1 = (l_Sum mint_0 a_0 i_1) in (0 <= i_1) ->
   (i_1 <= n_0) -> (((-2147483648) <= x_1) /\ (x_1 <= 2147483647))) ->
  (x_0 = ((l_Sum mint_0 a_0 n_0)))

end

(* ---------------------------------------------------------- *)
(* --- Preservation of Invariant (file sum.c, line 10) (1/2) --- *)
(* ---------------------------------------------------------- *)
theory VCsum_loop_inv_preserved_part1
  
use import bool.Bool
use import int.Int
use import int.ComputerDivision
use import real.RealInfix
use import Qed.Qed
use import int.Abs as IAbs
use import map.Map
use import Memory.Memory
use import Cint.Cint
use import A_SumAxiomatic.A_SumAxiomatic

goal WP "expl:Preservation of Invariant (file sum.c, line 10) (1/2)":
  forall i_0 n_0 : int.
  forall malloc_0 : map int int.
  forall mint_0 : map addr int.
  forall a_0 : addr.
  let x_0 = (l_Sum mint_0 a_0 i_0) in
  let a_1 = (shift a_0 i_0) in
  let x_1 = mint_0[a_1] in
  let x_2 = x_0 + x_1 in
  (i_0 < n_0) ->
  (0 <= i_0) ->
  (i_0 <= 4294967294) ->
  (i_0 <= n_0) ->
  ((linked malloc_0)) ->
  ((is_uint32 i_0)) ->
  ((is_uint32 n_0)) ->
  ((-2147483648) <= x_0) ->
  (x_0 <= 2147483647) ->
  ((is_uint32 (1 + i_0))) ->
  ((is_sint32 x_0)) ->
  ((is_sint32 x_1)) ->
  ((valid_rd malloc_0 ((shift a_0 0)) n_0)) ->
  ((valid_rd malloc_0 a_1 1)) ->
  ((-2147483648) <= x_2) ->
  (x_2 <= 2147483647) ->
  (forall i_1 : int. let x_3 = (l_Sum mint_0 a_0 i_1) in (0 <= i_1) ->
   (i_1 <= n_0) -> (((-2147483648) <= x_3) /\ (x_3 <= 2147483647))) ->
  ((-1) <= i_0)

end

(* ---------------------------------------------------------- *)
(* --- Establishment of Invariant (file sum.c, line 10) (2/2) --- *)
(* ---------------------------------------------------------- *)
theory VCsum_loop_inv_established_part2
  
use import bool.Bool
use import int.Int
use import int.ComputerDivision
use import real.RealInfix
use import Qed.Qed
use import int.Abs as IAbs
use import map.Map
use import Memory.Memory
use import Cint.Cint
use import A_SumAxiomatic.A_SumAxiomatic

goal WP "expl:Establishment of Invariant (file sum.c, line 10) (2/2)":
  forall i_0 n_0 : int.
  forall malloc_0 : map int int.
  forall mint_1 mint_0 : map addr int.
  forall a_0 : addr.
  ((linked malloc_0)) ->
  ((is_uint32 n_0)) ->
  ((is_sint32 mint_1[(shift a_0 i_0)])) ->
  ((valid_rd malloc_0 ((shift a_0 0)) n_0)) ->
  (forall i_1 : int. let x_0 = (l_Sum mint_0 a_0 i_1) in (0 <= i_1) ->
   (i_1 <= n_0) -> (((-2147483648) <= x_0) /\ (x_0 <= 2147483647))) ->
  (0 <= n_0)

end

(* ---------------------------------------------------------- *)
(* --- Preservation of Invariant (file sum.c, line 12)    --- *)
(* ---------------------------------------------------------- *)
theory VCsum_loop_inv_3_preserved
  
use import bool.Bool
use import int.Int
use import int.ComputerDivision
use import real.RealInfix
use import Qed.Qed
use import int.Abs as IAbs
use import map.Map
use import Memory.Memory
use import Cint.Cint
use import A_SumAxiomatic.A_SumAxiomatic

goal WP "expl:Preservation of Invariant (file sum.c, line 12)":
  forall i_0 n_0 : int.
  forall malloc_0 : map int int.
  forall mint_0 : map addr int.
  forall a_0 : addr.
  let x_0 = (l_Sum mint_0 a_0 i_0) in
  let x_1 = 1 + i_0 in
  let a_1 = (shift a_0 i_0) in
  let x_2 = mint_0[a_1] in
  let x_3 = x_0 + x_2 in
  (i_0 < n_0) ->
  (0 <= i_0) ->
  (i_0 <= 4294967294) ->
  (i_0 <= n_0) ->
  ((linked malloc_0)) ->
  ((is_uint32 i_0)) ->
  ((is_uint32 n_0)) ->
  ((-2147483648) <= x_0) ->
  (x_0 <= 2147483647) ->
  ((is_uint32 x_1)) ->
  ((is_sint32 x_0)) ->
  ((is_sint32 x_2)) ->
  ((valid_rd malloc_0 ((shift a_0 0)) n_0)) ->
  ((valid_rd malloc_0 a_1 1)) ->
  ((-2147483648) <= x_3) ->
  (x_3 <= 2147483647) ->
  ((is_sint32 x_3)) ->
  (forall i_1 : int. let x_4 = (l_Sum mint_0 a_0 i_1) in (0 <= i_1) ->
   (i_1 <= n_0) -> (((-2147483648) <= x_4) /\ (x_4 <= 2147483647))) ->
  (((l_Sum mint_0 a_0 x_1)) = x_3)

end

(* ---------------------------------------------------------- *)
(* --- Establishment of Invariant (file sum.c, line 12)   --- *)
(* ---------------------------------------------------------- *)
theory VCsum_loop_inv_3_established
  
use import bool.Bool
use import int.Int
use import int.ComputerDivision
use import real.RealInfix
use import Qed.Qed
use import int.Abs as IAbs
use import map.Map
use import Memory.Memory
use import Cint.Cint
use import A_SumAxiomatic.A_SumAxiomatic

goal WP "expl:Establishment of Invariant (file sum.c, line 12)":
  forall i_0 n_0 : int.
  forall malloc_0 : map int int.
  forall mint_1 mint_0 : map addr int.
  forall a_0 : addr.
  ((linked malloc_0)) ->
  ((is_uint32 n_0)) ->
  ((is_sint32 mint_1[(shift a_0 i_0)])) ->
  ((valid_rd malloc_0 ((shift a_0 0)) n_0)) ->
  (forall i_1 : int. let x_0 = (l_Sum mint_0 a_0 i_1) in (0 <= i_1) ->
   (i_1 <= n_0) -> (((-2147483648) <= x_0) /\ (x_0 <= 2147483647))) ->
  (0 = ((l_Sum mint_0 a_0 0)))

end

(* ---------------------------------------------------------- *)
(* --- Assertion 'rte,mem_access' (file sum.c, line 18)   --- *)
(* ---------------------------------------------------------- *)
theory VCsum_assert_rte_mem_access
  
use import bool.Bool
use import int.Int
use import int.ComputerDivision
use import real.RealInfix
use import Qed.Qed
use import int.Abs as IAbs
use import map.Map
use import Memory.Memory
use import Cint.Cint
use import A_SumAxiomatic.A_SumAxiomatic

goal WP "expl:Assertion 'rte,mem_access' (file sum.c, line 18)":
  forall i_0 n_0 : int.
  forall malloc_0 : map int int.
  forall mint_1 mint_0 : map addr int.
  forall a_0 : addr.
  let x_0 = (l_Sum mint_0 a_0 i_0) in
  let a_1 = (shift a_0 i_0) in
  (i_0 < n_0) ->
  (0 <= i_0) ->
  (i_0 <= n_0) ->
  ((linked malloc_0)) ->
  ((is_uint32 i_0)) ->
  ((is_uint32 n_0)) ->
  ((-2147483648) <= x_0) ->
  (x_0 <= 2147483647) ->
  ((is_sint32 x_0)) ->
  ((is_sint32 mint_1[a_1])) ->
  ((valid_rd malloc_0 ((shift a_0 0)) n_0)) ->
  (forall i_1 : int. let x_1 = (l_Sum mint_0 a_0 i_1) in (0 <= i_1) ->
   (i_1 <= n_0) -> (((-2147483648) <= x_1) /\ (x_1 <= 2147483647))) ->
  ((valid_rd malloc_0 a_1 1))

end

(* ---------------------------------------------------------- *)
(* --- Assertion 'rte,signed_overflow' (file sum.c, line 18) --- *)
(* ---------------------------------------------------------- *)
theory VCsum_assert_rte_signed_overflow
  
use import bool.Bool
use import int.Int
use import int.ComputerDivision
use import real.RealInfix
use import Qed.Qed
use import int.Abs as IAbs
use import map.Map
use import Memory.Memory
use import Cint.Cint
use import A_SumAxiomatic.A_SumAxiomatic

goal WP "expl:Assertion 'rte,signed_overflow' (file sum.c, line 18)":
  forall i_0 n_0 : int.
  forall malloc_0 : map int int.
  forall mint_0 : map addr int.
  forall a_0 : addr.
  let x_0 = (l_Sum mint_0 a_0 i_0) in
  let x_1 = mint_0[(shift a_0 i_0)] in
  (i_0 < n_0) ->
  (0 <= i_0) ->
  (i_0 <= n_0) ->
  ((linked malloc_0)) ->
  ((is_uint32 i_0)) ->
  ((is_uint32 n_0)) ->
  ((-2147483648) <= x_0) ->
  (x_0 <= 2147483647) ->
  ((is_sint32 x_0)) ->
  ((is_sint32 x_1)) ->
  ((valid_rd malloc_0 ((shift a_0 0)) n_0)) ->
  (forall i_1 : int. let x_2 = (l_Sum mint_0 a_0 i_1) in (0 <= i_1) ->
   (i_1 <= n_0) -> (((-2147483648) <= x_2) /\ (x_2 <= 2147483647))) ->
  ((-2147483648) <= (x_0 + x_1))

end

(* ---------------------------------------------------------- *)
(* --- Assertion 'rte,signed_overflow' (file sum.c, line 18) --- *)
(* ---------------------------------------------------------- *)
theory VCsum_assert_rte_signed_overflow_2
  
use import bool.Bool
use import int.Int
use import int.ComputerDivision
use import real.RealInfix
use import Qed.Qed
use import int.Abs as IAbs
use import map.Map
use import Memory.Memory
use import Cint.Cint
use import A_SumAxiomatic.A_SumAxiomatic

goal WP "expl:Assertion 'rte,signed_overflow' (file sum.c, line 18)":
  forall i_0 n_0 : int.
  forall malloc_0 : map int int.
  forall mint_0 : map addr int.
  forall a_0 : addr.
  let x_0 = (l_Sum mint_0 a_0 i_0) in
  let x_1 = mint_0[(shift a_0 i_0)] in
  (i_0 < n_0) ->
  (0 <= i_0) ->
  (i_0 <= n_0) ->
  ((linked malloc_0)) ->
  ((is_uint32 i_0)) ->
  ((is_uint32 n_0)) ->
  ((-2147483648) <= x_0) ->
  (x_0 <= 2147483647) ->
  ((is_sint32 x_0)) ->
  ((is_sint32 x_1)) ->
  ((valid_rd malloc_0 ((shift a_0 0)) n_0)) ->
  (forall i_1 : int. let x_2 = (l_Sum mint_0 a_0 i_1) in (0 <= i_1) ->
   (i_1 <= n_0) -> (((-2147483648) <= x_2) /\ (x_2 <= 2147483647))) ->
  ((x_0 + x_1) <= 2147483647)

end

(* ---------------------------------------------------------- *)
(* --- Assertion 'rte,unsigned_overflow' (file sum.c, line 16) --- *)
(* ---------------------------------------------------------- *)
theory VCsum_assert_rte_unsigned_overflow
  
use import bool.Bool
use import int.Int
use import int.ComputerDivision
use import real.RealInfix
use import Qed.Qed
use import int.Abs as IAbs
use import map.Map
use import Memory.Memory
use import Cint.Cint
use import A_SumAxiomatic.A_SumAxiomatic

goal WP "expl:Assertion 'rte,unsigned_overflow' (file sum.c, line 16)":
  forall i_0 n_0 : int.
  forall malloc_0 : map int int.
  forall mint_0 : map addr int.
  forall a_0 : addr.
  let x_0 = (l_Sum mint_0 a_0 i_0) in
  let a_1 = (shift a_0 i_0) in
  let x_1 = mint_0[a_1] in
  let x_2 = x_0 + x_1 in
  (i_0 < n_0) ->
  (0 <= i_0) ->
  (i_0 <= n_0) ->
  ((linked malloc_0)) ->
  ((is_uint32 i_0)) ->
  ((is_uint32 n_0)) ->
  ((-2147483648) <= x_0) ->
  (x_0 <= 2147483647) ->
  ((is_sint32 x_0)) ->
  ((is_sint32 x_1)) ->
  ((valid_rd malloc_0 ((shift a_0 0)) n_0)) ->
  ((valid_rd malloc_0 a_1 1)) ->
  ((-2147483648) <= x_2) ->
  (x_2 <= 2147483647) ->
  (forall i_1 : int. let x_3 = (l_Sum mint_0 a_0 i_1) in (0 <= i_1) ->
   (i_1 <= n_0) -> (((-2147483648) <= x_3) /\ (x_3 <= 2147483647))) ->
  (i_0 <= 4294967294)

end

